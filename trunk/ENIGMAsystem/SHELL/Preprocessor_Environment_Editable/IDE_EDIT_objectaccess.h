/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

// Depending on how many times your game accesses variables via OBJECT.varname, this file may be empty.

namespace enigma
{
  object_locals ldummy;
  object_locals *glaccess(int x)
  {
    object_locals* ri = (object_locals*)fetch_instance_by_int(x);
    return ri ? ri : &ldummy;
  }

  var dummy_0; // Referenced by 20 accessors
  var  &varaccess_argument1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->argument1;
    }
    return dummy_0;
  }
  var  &varaccess_enigmaheight(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->enigmaheight;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->enigmaheight;
    }
    return dummy_0;
  }
  var  &varaccess_enigmawidth(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->enigmawidth;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->enigmawidth;
    }
    return dummy_0;
  }
  var  &varaccess_file(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->file;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->file;
    }
    return dummy_0;
  }
  var  &varaccess_group_amount(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->group_amount;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->group_amount;
    }
    return dummy_0;
  }
  var  &varaccess_group_id(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->group_id;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->group_id;
    }
    return dummy_0;
  }
  var  &varaccess_group_object(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->group_object;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->group_object;
    }
    return dummy_0;
  }
  var  &varaccess_group_status(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->group_status;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->group_status;
    }
    return dummy_0;
  }
  var  &varaccess_i(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->i;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->i;
    }
    return dummy_0;
  }
  var  &varaccess_lines(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->lines;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->lines;
    }
    return dummy_0;
  }
  var  &varaccess_name(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->name;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->name;
    }
    return dummy_0;
  }
  var  &varaccess_object(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->object;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->object;
    }
    return dummy_0;
  }
  var  &varaccess_object_numb(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->object_numb;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->object_numb;
    }
    return dummy_0;
  }
  var  &varaccess_object_x(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->object_x;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->object_x;
    }
    return dummy_0;
  }
  var  &varaccess_object_y(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->object_y;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->object_y;
    }
    return dummy_0;
  }
  var  &varaccess_temp(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->temp;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->temp;
    }
    return dummy_0;
  }
  var  &varaccess_temp_x(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->temp_x;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->temp_x;
    }
    return dummy_0;
  }
  var  &varaccess_temp_y(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->temp_y;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->temp_y;
    }
    return dummy_0;
  }
  var  &varaccess_xx(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->xx;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->xx;
    }
    return dummy_0;
  }
  var  &varaccess_yy(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_controller: return ((OBJ_obj_controller*)inst)->yy;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->yy;
    }
    return dummy_0;
  }
} // namespace enigma
