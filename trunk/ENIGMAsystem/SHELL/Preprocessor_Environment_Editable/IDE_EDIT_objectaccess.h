/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

// Depending on how many times your game accesses variables via OBJECT.varname, this file may be empty.

namespace enigma
{
  object_locals ldummy;
  object_locals *glaccess(int x)
  {
    object_locals* ri = (object_locals*)fetch_instance_by_int(x);
    return ri ? ri : &ldummy;
  }

  var dummy_0; // Referenced by 30 accessors
  var  &varaccess__hh(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_minimap: return ((OBJ_obj_minimap*)inst)->_hh;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->_hh;
    }
    return dummy_0;
  }
  var  &varaccess__ww(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_minimap: return ((OBJ_obj_minimap*)inst)->_ww;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->_ww;
    }
    return dummy_0;
  }
  var  &varaccess__xx(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_minimap: return ((OBJ_obj_minimap*)inst)->_xx;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->_xx;
    }
    return dummy_0;
  }
  var  &varaccess__yy(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_minimap: return ((OBJ_obj_minimap*)inst)->_yy;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->_yy;
    }
    return dummy_0;
  }
  var  &varaccess_ac(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case enemy_tank: return ((OBJ_enemy_tank*)inst)->ac;
      case enemy_tank2: return ((OBJ_enemy_tank2*)inst)->ac;
      case base: return ((OBJ_base*)inst)->ac;
      case allie: return ((OBJ_allie*)inst)->ac;
      case enemy_tankt1: return ((OBJ_enemy_tankt1*)inst)->ac;
      case baset1: return ((OBJ_baset1*)inst)->ac;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->ac;
    }
    return dummy_0;
  }
  var  &varaccess_act1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->act1;
    }
    return dummy_0;
  }
  var  &varaccess_act2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->act2;
    }
    return dummy_0;
  }
  var  &varaccess_act3(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->act3;
    }
    return dummy_0;
  }
  var  &varaccess_act4(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->act4;
    }
    return dummy_0;
  }
  var  &varaccess_attack(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->attack;
    }
    return dummy_0;
  }
  var  &varaccess_dd(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->dd;
    }
    return dummy_0;
  }
  var  &varaccess_discovered(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->discovered;
    }
    return dummy_0;
  }
  var  &varaccess_enigmacontinue(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case HQ: return ((OBJ_HQ*)inst)->enigmacontinue;
      case mmc1: return ((OBJ_mmc1*)inst)->enigmacontinue;
      case activator1: return ((OBJ_activator1*)inst)->enigmacontinue;
      case activator2: return ((OBJ_activator2*)inst)->enigmacontinue;
      case activator3: return ((OBJ_activator3*)inst)->enigmacontinue;
      case activator4: return ((OBJ_activator4*)inst)->enigmacontinue;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->enigmacontinue;
    }
    return dummy_0;
  }
  var  &varaccess_explo(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->explo;
    }
    return dummy_0;
  }
  var  &varaccess_fa_left(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case HQ: return ((OBJ_HQ*)inst)->fa_left;
      case mmc1: return ((OBJ_mmc1*)inst)->fa_left;
      case activator1: return ((OBJ_activator1*)inst)->fa_left;
      case activator2: return ((OBJ_activator2*)inst)->fa_left;
      case activator3: return ((OBJ_activator3*)inst)->fa_left;
      case activator4: return ((OBJ_activator4*)inst)->fa_left;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->fa_left;
    }
    return dummy_0;
  }
  var  &varaccess_fa_top(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case HQ: return ((OBJ_HQ*)inst)->fa_top;
      case mmc1: return ((OBJ_mmc1*)inst)->fa_top;
      case activator1: return ((OBJ_activator1*)inst)->fa_top;
      case activator2: return ((OBJ_activator2*)inst)->fa_top;
      case activator3: return ((OBJ_activator3*)inst)->fa_top;
      case activator4: return ((OBJ_activator4*)inst)->fa_top;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->fa_top;
    }
    return dummy_0;
  }
  var  &varaccess_gamemaker_registered(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case HQ: return ((OBJ_HQ*)inst)->gamemaker_registered;
      case mmc1: return ((OBJ_mmc1*)inst)->gamemaker_registered;
      case activator1: return ((OBJ_activator1*)inst)->gamemaker_registered;
      case activator2: return ((OBJ_activator2*)inst)->gamemaker_registered;
      case activator3: return ((OBJ_activator3*)inst)->gamemaker_registered;
      case activator4: return ((OBJ_activator4*)inst)->gamemaker_registered;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->gamemaker_registered;
    }
    return dummy_0;
  }
  var  &varaccess_goahead(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->goahead;
    }
    return dummy_0;
  }
  var  &varaccess_goahead2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->goahead2;
    }
    return dummy_0;
  }
  var  &varaccess_health(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->health;
    }
    return dummy_0;
  }
  var  &varaccess_health1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->health1;
    }
    return dummy_0;
  }
  var  &varaccess_health2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->health2;
    }
    return dummy_0;
  }
  var  &varaccess_health3(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->health3;
    }
    return dummy_0;
  }
  var  &varaccess_mssg1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->mssg1;
    }
    return dummy_0;
  }
  var  &varaccess_mssg2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->mssg2;
    }
    return dummy_0;
  }
  var  &varaccess_mssg3(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->mssg3;
    }
    return dummy_0;
  }
  var  &varaccess_mssg4(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->mssg4;
    }
    return dummy_0;
  }
  var  &varaccess_mssg5(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->mssg5;
    }
    return dummy_0;
  }
  var  &varaccess_success(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->success;
    }
    return dummy_0;
  }
  var  &varaccess_welcome(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->welcome;
    }
    return dummy_0;
  }
} // namespace enigma
