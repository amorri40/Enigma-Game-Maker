/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

// Depending on how many times your game accesses variables via OBJECT.varname, this file may be empty.

namespace enigma
{
  object_locals ldummy;
  object_locals *glaccess(int x)
  {
    object_locals* ri = (object_locals*)fetch_instance_by_int(x);
    return ri ? ri : &ldummy;
  }

  var dummy_0; // Referenced by 17 accessors
  var  &varaccess_Y(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->Y;
    }
    return dummy_0;
  }
  var  &varaccess_a0(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->a0;
    }
    return dummy_0;
  }
  var  &varaccess_a1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->a1;
    }
    return dummy_0;
  }
  var  &varaccess_ammo(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_player_3D: return ((OBJ_obj_player_3D*)inst)->ammo;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->ammo;
    }
    return dummy_0;
  }
  var  &varaccess_b0(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->b0;
    }
    return dummy_0;
  }
  var  &varaccess_b1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->b1;
    }
    return dummy_0;
  }
  var  &varaccess_center(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->center;
    }
    return dummy_0;
  }
  var  &varaccess_contrafont(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->contrafont;
    }
    return dummy_0;
  }
  var  &varaccess_i(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_player_3D: return ((OBJ_obj_player_3D*)inst)->i;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->i;
    }
    return dummy_0;
  }
  var  &varaccess_other_hspeed(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_bullet_3D: return ((OBJ_obj_bullet_3D*)inst)->other_hspeed;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->other_hspeed;
    }
    return dummy_0;
  }
  var  &varaccess_other_x(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_bullet_3D: return ((OBJ_obj_bullet_3D*)inst)->other_x;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->other_x;
    }
    return dummy_0;
  }
  var  &varaccess_p1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->p1;
    }
    return dummy_0;
  }
  var  &varaccess_p2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->p2;
    }
    return dummy_0;
  }
  var  &varaccess_size1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->size1;
    }
    return dummy_0;
  }
  var  &varaccess_size2(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->size2;
    }
    return dummy_0;
  }
  var  &varaccess_x1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_background: return ((OBJ_obj_background*)inst)->x1;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->x1;
    }
    return dummy_0;
  }
  var  &varaccess_y1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_background: return ((OBJ_obj_background*)inst)->y1;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->y1;
    }
    return dummy_0;
  }
} // namespace enigma
