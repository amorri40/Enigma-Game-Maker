/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

// Depending on how many times your game accesses variables via OBJECT.varname, this file may be empty.

namespace enigma
{
  object_locals ldummy;
  object_locals *glaccess(int x)
  {
    object_locals* ri = (object_locals*)fetch_instance_by_int(x);
    return ri ? ri : &ldummy;
  }

  var dummy_0; // Referenced by 10 accessors
  var  &varaccess_ani(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_player: return ((OBJ_obj_player*)inst)->ani;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->ani;
    }
    return dummy_0;
  }
  var  &varaccess_camcos(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->camcos;
    }
    return dummy_0;
  }
  var  &varaccess_camsin(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->camsin;
    }
    return dummy_0;
  }
  var  &varaccess_camx(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->camx;
    }
    return dummy_0;
  }
  var  &varaccess_camy(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->camy;
    }
    return dummy_0;
  }
  var  &varaccess_gun_obj(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case gun_thenigmaing: return ((OBJ_gun_thenigmaing*)inst)->gun_obj;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->gun_obj;
    }
    return dummy_0;
  }
  var  &varaccess_model_chunk1(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->model_chunk1;
    }
    return dummy_0;
  }
  var  &varaccess_snipe(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->snipe;
    }
    return dummy_0;
  }
  var  &varaccess_tex(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case chunk_obj: return ((OBJ_chunk_obj*)inst)->tex;
      case chunk2_obj: return ((OBJ_chunk2_obj*)inst)->tex;
      case gore_spr: return ((OBJ_gore_spr*)inst)->tex;
      case chunk3: return ((OBJ_chunk3*)inst)->tex;
      case gore_test: return ((OBJ_gore_test*)inst)->tex;
      case wallH: return ((OBJ_wallH*)inst)->tex;
      case wallv: return ((OBJ_wallv*)inst)->tex;
      case wallV_basic: return ((OBJ_wallV_basic*)inst)->tex;
      case wall_Hbasic: return ((OBJ_wall_Hbasic*)inst)->tex;
      case wall_basic: return ((OBJ_wall_basic*)inst)->tex;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->tex;
    }
    return dummy_0;
  }
  var  &varaccess_z(int x)
  {
    object_basic *inst = fetch_instance_by_int(x);
    if (inst) switch (inst->object_index)
    {
      case obj_player: return ((OBJ_obj_player*)inst)->z;
      case bullit: return ((OBJ_bullit*)inst)->z;
      case gun_thenigmaing: return ((OBJ_gun_thenigmaing*)inst)->z;
      case chunk_obj: return ((OBJ_chunk_obj*)inst)->z;
      case chunk2_obj: return ((OBJ_chunk2_obj*)inst)->z;
      case gore_spr: return ((OBJ_gore_spr*)inst)->z;
      case slpat: return ((OBJ_slpat*)inst)->z;
      case chunk3: return ((OBJ_chunk3*)inst)->z;
      case gore_test: return ((OBJ_gore_test*)inst)->z;
      case gore_splat: return ((OBJ_gore_splat*)inst)->z;
      case global: return ((ENIGMA_global_structure*)ENIGMA_global_instance)->z;
    }
    return dummy_0;
  }
} // namespace enigma
