/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant _SCR_instance_nearest_ext(variant argument0, variant argument1, variant argument2, variant argument3)
{
  with(self)
  {
    if(! instance_exists(argument2))
      return - 1;
    var object, numb, size, value;
    enigma::varaccess__list(int(self))= ds_list_create();
    enigma::varaccess__xx(int(self))= argument0;
    enigma::varaccess__yy(int(self))= argument1;
    object = argument2;
    numb = argument3;
    with(object)
    {
      enigma::varaccess__instance(int(other))(point_distance(enigma::glaccess(int(self))-> x, enigma::glaccess(int(self))-> y, enigma::varaccess__xx(int(other)), enigma::varaccess__yy(int(other))))= enigma::glaccess(int(self))-> id;
      with(other)
        ds_list_add(enigma::varaccess__list(int(self)), point_distance(enigma::varaccess__xx(int(self)), enigma::varaccess__yy(int(self)), enigma::glaccess(int(other))-> x, enigma::glaccess(int(other))-> y));
      
    }
    ds_list_sort(enigma::varaccess__list(int(self)), 1);
    size = ds_list_size(enigma::varaccess__list(int(self)));
    if(numb >= size)
      return - 1;
    value = ds_list_find_value(enigma::varaccess__list(int(self)), numb);
    return enigma::varaccess__instance(int(self))(value);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    numb = 0;
    instance_create(window_get_region_width()/ (double) 2, window_get_region_height()/ (double) 2, obj_ball);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_mouseunknown()
{
  
  {
    if(mouse_check_button(mb_left))
      instance_create(mouse_x, mouse_y, obj_ball);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    font_size = 14;
    font_color = c_purple;
    font_align = fa_center;
    enigmadraw_text(window_get_region_width()/ (double) 2, window_get_region_height()/ (double) 2 + 32, "Central Object");
    font_align = fa_left;
    suffix ="'th";
    if(numb == 0)
      suffix ="'st";
    if(numb == 1)
      suffix ="'nd";
    if(numb == 2)
      suffix ="'rd";
    draw_text_ext(16, 16, "Instance Nearest will find the instance of object ball that is the "+ toString(numb + 1)+ suffix + " closest (N) to the ball enigmain the center of the screen.", 22, window_get_region_width()- 32);
    font_size = 14;
    enigmadraw_text(16, window_get_region_height()- 32, "Left click to create objects. Use the up and down keys to change N. Press Enter to clear.");
    if(instance_exists(obj_ball))
    {
      draw_set_color(enigma_make_color(0, 220, 0));
      object = instance_nearest_ext(window_get_region_width()/ (double) 2, window_get_region_height()/ (double) 2, obj_ball, numb);
      if(object !=- 1)
      {
        draw_fill(enigma::glaccess(int(object))-> x, enigma::glaccess(int(object))-> y);
        show_message("instance nearest:"+ toString(object));
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_keypress_13()
{
  
  {
    game_restart();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_keypress_38()
{
  
  {
    numb += 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::myevent_keypress_40()
{
  
  {
    numb = enigma_max(0, numb - 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_controller::_SCR_instance_nearest_ext(variant argument0, variant argument1, variant argument2, variant argument3)
{
  if(! instance_exists(argument2))
    return - 1;
  var object, numb, size, value;
  _list = ds_list_create();
  _xx = argument0;
  _yy = argument1;
  object = argument2;
  numb = argument3;
  with(object)
  {
    enigma::varaccess__instance(int(other))(point_distance(enigma::glaccess(int(self))-> x, enigma::glaccess(int(self))-> y, enigma::varaccess__xx(int(other)), enigma::varaccess__yy(int(other))))= enigma::glaccess(int(self))-> id;
    with(other)
      ds_list_add(enigma::varaccess__list(int(self)), point_distance(enigma::varaccess__xx(int(self)), enigma::varaccess__yy(int(self)), enigma::glaccess(int(other))-> x, enigma::glaccess(int(other))-> y));
    
  }
  ds_list_sort(_list, 1);
  size = ds_list_size(_list);
  if(numb >= size)
    return - 1;
  value = ds_list_find_value(_list, numb);
  return _instance(value);
  ;
  
  return 0;
}

variant enigma::OBJ_obj_ball::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_set_color(c_blue);
    pen_color = c_purple;
    draw_circle(x, y, 8);
    
  }
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
    { (variant(*)())_SCR_instance_nearest_ext, 4 },
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
