/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant _SCR_Chunk1()
{
  
  {
    enigma::varaccess_model_chunk1(int(global))= d3d_model_create();
    d3d_model_primitive_begin(enigma::varaccess_model_chunk1(int(global)), 4.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.0607, 0.0000, 0.8787, 0.9413, - 0.2757, - 0.1949, 0.6100, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, 1.5000, 0.8787, 0.9413, - 0.2757, - 0.1949, 0.5475, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.9413, - 0.2757, - 0.1949, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, 1.5000, 0.8787, 0.6271, - 0.1837, - 0.7570, 0.5475, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.0607, 0.0000, 0.8787, 0.6271, - 0.1837, - 0.7570, 0.6100, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, 0.6271, - 0.1837, - 0.7570, 0.5788, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.7058, 0.2924, 0.6453, 0.6100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.7058, 0.2924, 0.6453, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, 0.7500, 5.1213, 0.7058, 0.2924, 0.6453, 0.5475, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.7058, 0.2924, - 0.6453, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.7058, 0.2924, - 0.6453, 0.6100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.0607, 0.0000, 0.8787, 0.7058, 0.2924, - 0.6453, 0.6100, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 0.0000, 5.1213, - 0.2968, - 0.5427, 0.7857, 0.6100, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, 0.7500, 5.1213, - 0.2968, - 0.5427, 0.7857, 0.5475, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, - 0.2968, - 0.5427, 0.7857, 0.5788, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, 0.7500, 5.1213, 0.4706, 0.8605, 0.1949, 0.5475, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 0.0000, 5.1213, 0.4706, 0.8605, 0.1949, 0.6100, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.4706, 0.8605, 0.1949, 0.6100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, 1.5000, 0.8787, - 0.2113, 0.7214, - 0.6595, 0.5475, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 1.0607, 0.8787, - 0.2113, 0.7214, - 0.6595, 0.4850, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, - 0.2113, 0.7214, - 0.6595, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 1.0607, 0.8787, - 0.1837, 0.6271, - 0.7570, 0.4850, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, 1.5000, 0.8787, - 0.1837, 0.6271, - 0.7570, 0.5475, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, - 0.1837, 0.6271, - 0.7570, 0.5163, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.3574, 0.8629, 0.3574, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, 0.3574, 0.8629, 0.3574, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 2.1213, 5.1213, 0.3574, 0.8629, 0.3574, 0.4850, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, 0.3574, 0.8629, - 0.3574, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.3574, 0.8629, - 0.3574, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, 1.5000, 0.8787, 0.3574, 0.8629, - 0.3574, 0.5475, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, 0.7500, 5.1213, - 0.5427, - 0.2968, 0.7857, 0.5475, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 2.1213, 5.1213, - 0.5427, - 0.2968, 0.7857, 0.4850, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, - 0.5427, - 0.2968, 0.7857, 0.5163, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 2.1213, 5.1213, 0.6595, 0.3607, 0.6595, 0.4850, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, 0.7500, 5.1213, 0.6595, 0.3607, 0.6595, 0.5475, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 2.1213, 3.0000, 0.6595, 0.3607, 0.6595, 0.5475, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 1.0607, 0.8787, 0.2783, 0.9503, 0.1392, 0.4850, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 0.8787, 0.2783, 0.9503, 0.1392, 0.4225, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, 0.2783, 0.9503, 0.1392, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 0.8787, 0.1837, 0.6271, - 0.7570, 0.4225, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 1.0607, 0.8787, 0.1837, 0.6271, - 0.7570, 0.4850, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, 0.1837, 0.6271, - 0.7570, 0.4538, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, - 0.8446, 0.4619, - 0.2706, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, - 0.8446, 0.4619, - 0.2706, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 5.1213, - 0.8446, 0.4619, - 0.2706, 0.4225, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, - 0.8034, 0.4394, - 0.4017, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, - 0.8034, 0.4394, - 0.4017, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 1.0607, 0.8787, - 0.8034, 0.4394, - 0.4017, 0.4850, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 2.1213, 5.1213, 0.1448, - 0.3496, 0.9256, 0.4850, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 5.1213, 0.1448, - 0.3496, 0.9256, 0.4225, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, 0.1448, - 0.3496, 0.9256, 0.4538, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 5.1213, - 0.3574, 0.8629, 0.3574, 0.4225, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 2.1213, 5.1213, - 0.3574, 0.8629, 0.3574, 0.4850, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 3.0000, 3.0000, - 0.3574, 0.8629, 0.3574, 0.4850, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 0.8787, - 0.8629, 0.3574, - 0.3574, 0.4225, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 0.8787, - 0.8629, 0.3574, - 0.3574, 0.3600, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.8629, 0.3574, - 0.3574, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 0.8787, - 0.3780, 0.1566, - 0.9125, 0.3600, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 0.8787, - 0.3780, 0.1566, - 0.9125, 0.4225, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, - 0.3780, 0.1566, - 0.9125, 0.3913, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, - 0.4706, 0.8605, 0.1949, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.4706, 0.8605, 0.1949, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 5.1213, - 0.4706, 0.8605, 0.1949, 0.3600, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.4619, 0.8446, 0.2706, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, - 0.4619, 0.8446, 0.2706, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 0.8787, - 0.4619, 0.8446, 0.2706, 0.4225, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 5.1213, 0.3496, - 0.1448, 0.9256, 0.4225, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 5.1213, 0.3496, - 0.1448, 0.9256, 0.3600, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, 0.3496, - 0.1448, 0.9256, 0.3913, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 5.1213, - 0.8918, 0.3694, - 0.2612, 0.3600, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, 1.5000, 5.1213, - 0.8918, 0.3694, - 0.2612, 0.4225, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, 1.0607, 3.0000, - 0.8918, 0.3694, - 0.2612, 0.4225, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 0.8787, - 0.8918, - 0.3694, 0.2612, 0.3600, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 0.8787, - 0.8918, - 0.3694, 0.2612, 0.2975, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.8918, - 0.3694, 0.2612, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 0.8787, - 0.3780, - 0.1566, - 0.9125, 0.2975, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 0.8787, - 0.3780, - 0.1566, - 0.9125, 0.3600, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, - 0.3780, - 0.1566, - 0.9125, 0.3288, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.4619, - 0.8446, - 0.2706, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.4619, - 0.8446, - 0.2706, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 5.1213, - 0.4619, - 0.8446, - 0.2706, 0.2975, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.4706, - 0.8605, - 0.1949, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.4706, - 0.8605, - 0.1949, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 0.8787, - 0.4706, - 0.8605, - 0.1949, 0.3600, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 5.1213, 0.3496, 0.1448, 0.9256, 0.3600, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 5.1213, 0.3496, 0.1448, 0.9256, 0.2975, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, 0.3496, 0.1448, 0.9256, 0.3288, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 5.1213, - 0.8629, - 0.3574, 0.3574, 0.2975, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 2.1213, 0.0000, 5.1213, - 0.8629, - 0.3574, 0.3574, 0.3600, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 3.0000, 0.0000, 3.0000, - 0.8629, - 0.3574, 0.3574, 0.3600, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 0.8787, 0.2113, - 0.7214, - 0.6595, 0.2975, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 1.0607, 0.8787, 0.2113, - 0.7214, - 0.6595, 0.2350, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, 0.2113, - 0.7214, - 0.6595, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 1.0607, 0.8787, 0.1837, - 0.6271, - 0.7570, 0.2350, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 0.8787, 0.1837, - 0.6271, - 0.7570, 0.2975, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, 0.1837, - 0.6271, - 0.7570, 0.2663, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.8605, - 0.4706, 0.1949, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, - 0.8605, - 0.4706, 0.1949, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 2.1213, 5.1213, - 0.8605, - 0.4706, 0.1949, 0.2350, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, - 0.8446, - 0.4619, 0.2706, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.8446, - 0.4619, 0.2706, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 0.8787, - 0.8446, - 0.4619, 0.2706, 0.2975, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 5.1213, 0.1448, 0.3496, 0.9256, 0.2975, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 2.1213, 5.1213, 0.1448, 0.3496, 0.9256, 0.2350, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, 0.1448, 0.3496, 0.9256, 0.2663, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 2.1213, 5.1213, - 0.3694, - 0.8918, - 0.2612, 0.2350, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.5000, - 1.5000, 5.1213, - 0.3694, - 0.8918, - 0.2612, 0.2975, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), - 1.0607, - 1.0607, 3.0000, - 0.3694, - 0.8918, - 0.2612, 0.2975, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 1.0607, 0.8787, - 0.2757, - 0.9413, - 0.1949, 0.2350, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, - 1.5000, 0.8787, - 0.2757, - 0.9413, - 0.1949, 0.1725, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, - 0.2757, - 0.9413, - 0.1949, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, - 1.5000, 0.8787, - 0.1837, - 0.6271, - 0.7570, 0.1725, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 1.0607, 0.8787, - 0.1837, - 0.6271, - 0.7570, 0.2350, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, - 0.1837, - 0.6271, - 0.7570, 0.2038, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, 0.2924, - 0.7058, 0.6453, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, 0.2924, - 0.7058, 0.6453, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, - 0.7500, 5.1213, 0.2924, - 0.7058, 0.6453, 0.1725, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, 0.2924, - 0.7058, - 0.6453, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, 0.2924, - 0.7058, - 0.6453, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 1.0607, 0.8787, 0.2924, - 0.7058, - 0.6453, 0.2350, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 2.1213, 5.1213, - 0.5427, 0.2968, 0.7857, 0.2350, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, - 0.7500, 5.1213, - 0.5427, 0.2968, 0.7857, 0.1725, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, - 0.5427, 0.2968, 0.7857, 0.2038, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, - 0.7500, 5.1213, 0.8605, - 0.4706, 0.1949, 0.1725, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 2.1213, 5.1213, 0.8605, - 0.4706, 0.1949, 0.2350, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, - 3.0000, 3.0000, 0.8605, - 0.4706, 0.1949, 0.2350, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, - 1.5000, 0.8787, 0.7214, 0.2113, - 0.6595, 0.1725, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.0607, 0.0000, 0.8787, 0.7214, 0.2113, - 0.6595, 0.1100, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.7214, 0.2113, - 0.6595, 0.1100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.0607, 0.0000, 0.8787, 0.6271, 0.1837, - 0.7570, 0.1100, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, - 1.5000, 0.8787, 0.6271, 0.1837, - 0.7570, 0.1725, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 0.0000, 0.6271, 0.1837, - 0.7570, 0.1412, 0.7400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, 0.8629, - 0.3574, 0.3574, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.8629, - 0.3574, 0.3574, 0.1100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 0.0000, 5.1213, 0.8629, - 0.3574, 0.3574, 0.1100, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 3.0000, 0.0000, 3.0000, 0.8629, - 0.3574, - 0.3574, 0.1100, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, 0.8629, - 0.3574, - 0.3574, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 1.5000, - 1.5000, 0.8787, 0.8629, - 0.3574, - 0.3574, 0.1725, 0.6150, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, - 0.7500, 5.1213, - 0.2968, 0.5427, 0.7857, 0.1725, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 0.0000, 5.1213, - 0.2968, 0.5427, 0.7857, 0.1100, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.0000, 0.0000, 4.3200, - 0.2968, 0.5427, 0.7857, 0.1412, 0.2400, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, 0.0000, 5.1213, 0.3607, - 0.6595, 0.6595, 0.1100, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 0.7500, - 0.7500, 5.1213, 0.3607, - 0.6595, 0.6595, 0.1725, 0.3650, 16777215.0000, 1.0000);
    d3d_model_vertex_normal_texture_color(enigma::varaccess_model_chunk1(int(global)), 2.1213, - 2.1213, 3.0000, 0.3607, - 0.6595, 0.6595, 0.1725, 0.4900, 16777215.0000, 1.0000);
    d3d_model_primitive_end(enigma::varaccess_model_chunk1(int(global)));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      friction = 0.2;
      d3d_start();
      d3d_set_hidden(1);
      d3d_set_lighting(1);
      d3d_set_shading(1);
      d3d_set_culling(0);
      d3d_set_fog(1, c_black, 100, 250);
      texture_set_interpolation(0);
      
    }
    
  }
  
  {
    
    {
      enigma::varaccess_camx(int(global))= x;
      enigma::varaccess_camy(int(global))= y;
      enigma::varaccess_camsin(int(global))= sin(direction * pi / (double) 180);
      enigma::varaccess_camcos(int(global))= cos(direction * pi / (double) 180);
      
    }
    
  }
  
  {
    pitch = 0;
    z = 0;
    zfloor = 1;
    zgrav = 0.3;
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gun_thenigmaing, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_step()
{
  enigma::propagate_locals(this);
depth = 100;
  
  {
    draw_set_alpha(1);
    
  }
  
  {
    display_w = display_get_width();
    display_h = display_get_height();
    change_x =(display_mouse_get_x()- display_w / (double) 2)/ (double) 16;
    change_y =(display_mouse_get_y()- display_h / (double) 2)/ (double) 12;
    direction -= change_x;
    zdirection += change_y + mykick;
    if(zdirection < - 90)
    {
      zdirection =- 90;
      
    }
    else if(zdirection > 90)
    {
      zdirection = 90;
      
    }
    display_mouse_set(display_w / (double) 2, display_h / (double) 2);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_endstep()
{
  
  {
    
    {
      enigma::varaccess_camx(int(global))= x;
      enigma::varaccess_camy(int(global))= y;
      enigma::varaccess_camsin(int(global))= sin(direction * pi / (double) 180);
      enigma::varaccess_camcos(int(global))= cos(direction * pi / (double) 180);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_collision_79()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,79)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    
    {
      x = xprevious;
      y = yprevious;
      if(abs(hspeed)>= abs(vspeed)&& ! place_meeting(x + hspeed, y, wall_basic))
      {
        x += hspeed;
        exit;
        
      }
      if(abs(vspeed)>= abs(hspeed)&& ! place_meeting(x, y + vspeed, wall_basic))
      {
        y += vspeed;
        exit;
        
      }
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keyboard_65()
{
  
  {
    
    {
      var xn, yn;
      xn = x - sin(direction * pi / (double) 180);
      yn = y - cos(direction * pi / (double) 180);
      if(! place_meeting(xn, yn, wall_basic))
      {
        x = xn;
        y = yn;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keyboard_68()
{
  
  {
    
    {
      var xn, yn;
      xn = x + sin(direction * pi / (double) 180);
      yn = y + cos(direction * pi / (double) 180);
      if(! place_meeting(xn, yn, wall_basic))
      {
        x = xn;
        y = yn;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keyboard_83()
{
  
  {
    
    {
      var maxspeed;
      if(keyboard_check(vk_shift))
        maxspeed = 3;
      else maxspeed = 1.5;
      if(speed > - maxspeed)
        speed = enigma_max(- maxspeed, speed - 0.4);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keyboard_87()
{
  
  {
    
    {
      var maxspeed;
      if(keyboard_check(vk_shift))
        maxspeed = 3;
      else maxspeed = 1.5;
      if(speed < maxspeed)
        speed = enigma_min(maxspeed, speed + 0.4);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_globalleftpress()
{
  
  {
    argument_relative = 1;
    action_create_object(bullit, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_globalrightpress()
{
  
  {
    if(zgrav == 0)
    {
      zfloor = 1;
      zspeed = 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      draw_set_alpha(1);
      draw_set_color(c_white);
      
    }
    
  }
  
  {
    ani = sin(enigma::varaccess_ani(int(obj_player)))/ (double) 128 * enigma::varaccess_snipe(int(obj_player));
    xf = x;
    yf = y;
    zf = z;
    xt = xf + cos(degtorad(direction))+ ani;
    yt = yf - sin(degtorad(direction))+ ani;
    zt = zf - sin(degtorad(zdirection))+ ani;
    angle = 60 - enigma::varaccess_snipe(int(obj_player))* 40;
    d3d_set_projection_ext(xf, yf, zf + 13, xt, yt, zt + 13, 0, 0, 1, angle + ani * 16, 1, 1, 8048);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keypress_13()
{
  if(action_if_next_room())
  {
    action_next_room(0);
    
  }
  else
  {
    action_another_room(room0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_player::myevent_keypress_80()
{
  action_font(enigenigmamapause_font, 1);
  
  {
    
    {
      d3d_set_projection_ortho(0, 0, room_width, room_height, 0);
      draw_text(room_width / (double) 2, 100, "Paused");
      screen_refresh();
      keyboard_wait();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullit::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    z = 6 + enigma::varaccess_z(int(obj_player));
    
  }
  
  {
    argument_relative = 0;
    action_set_motion(enigma::glaccess(int(pbj_player))-> direction, 4);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullit::myevent_collision_72()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,72)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bullit::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    argument_relative = 0;
    d3d_transform_set_identity();
    
  }
  
  {
    argument_relative = 0;
    d3d_transform_add_translation(argument0, argument1, argument2);
    
  }
  
  {
    argument_relative = 0;
    enigma::varaccess_tex(int(global))= argument0;
    
  }
  
  {
    argument_relative = 0;
    d3d_draw_ellipsoid(argument0, argument1, argument2, argument3, argument4, argument5, enigma::varaccess_tex(int(global)), 1, 1, 16);
    
  }
  
  {
    argument_relative = 0;
    d3d_transform_set_identity();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_roomname::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;
action_color(16711680);
  action_font(enigenigmamapause_font, 1);
  
  {
    
    {
      d3d_set_lighting(0);
      d3d_set_projection_ortho(0, 0, room_width, room_height, 0);
      draw_text(room_width / (double) 2, 0, window_get_caption());
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_nolook::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_set_cursor(- 1, 0);
  
  return 0;
}

variant enigma::OBJ_nolook::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      d3d_set_projection_ortho(0, 0, room_width, room_height, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gun_thenigmaing::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    gun_obj = d3d_model_create();
    d3d_model_load(gun_obj, "ump.d3d");
    
  }
  
  {
    x = enigma::glaccess(int(obj_player))-> x + lengthdir_x(8, enigma::glaccess(int(obj_player))-> direction);
    y = enigma::glaccess(int(obj_player))-> y + lengthdir_y(8, enigma::glaccess(int(obj_player))-> direction);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gun_thenigmaing::myevent_step()
{
  enigma::propagate_locals(this);

  {
    
    {
      x = enigma::glaccess(int(obj_player))-> x + 7;
      y = enigma::glaccess(int(obj_player))-> y + 2;
      
    }
    
  }
  direction = enigma::glaccess(int(obj_player))-> direction;
  z = enigma::varaccess_z(int(obj_player));
  image_speed = 0.8;
  
  {
    
    {
      image_index += 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gun_thenigmaing::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    argument_relative = 0;
    d3d_transform_set_identity();
    
  }
  
  {
    rot = enigma::glaccess(int(obj_player))-> direction;
    d3d_transform_set_identity();
    d3d_transform_add_rotation_z(rot + 180);
    d3d_transform_add_translation(enigma::glaccess(int(obj_player))-> x, enigma::glaccess(int(obj_player))-> y, z + 7);
    d3d_model_draw(enigma::varaccess_gun_obj(int(obj_player)), 0, 0, 0, sprite_get_texture(guntex, image_index));
    d3d_transform_set_identity();
    
  }
  
  {
    argument_relative = 0;
    d3d_transform_set_identity();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fountaenigmain::myevent_keyboard_32()
{
  
  {
    argument_relative = 1;
    action_create_object(chunk_obj, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(obj_, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(obj_, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fountaenigmain::myevent_keypress_32()
{
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_friction(0.01);
    
  }
  
  {
    enigma::varaccess_model_chunk1(int(global))= d3d_model_create();
    d3d_model_load(enigma::varaccess_model_chunk1(int(global)), "chunk1.gmmod");
    
  }
  
  {
    if(zgrav == 0)
    {
      zfloor = 1;
      zspeed = 0.1;
      
    }
    
  }
  
  {
    pitch = 0;
    zfloor = 1;
    zgrav = 0.2;
    
  }
  
  {
    
    {
      z = 15;
      tex = background_get_texture(chunktex);
      
    }
    
  }
  
  {
    argument_relative = 0;
    action_set_motion(random(360), random(1));
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(30, 0);
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(100, 1);
    
  }
  
  {
    
    {
      image_index = random(- 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    draw_set_alpha(1);
    
  }
  
  {
    if(zfloor == 1)
    {
      z += zgrav + zspeed;
      zgrav +=- 0.1;
      
    }
    else if(zfloor == 0)
    {
      z += 0;
      zgrav = 0;
      
    }
    
  }
  
  {
    if(z < 1)
    {
      z = 0;
      zgrav = 0;
      zfloor = 0;
      
    }
    
  }
  
  {
    if(zfloor == 1)
    {
      zspeed -=- zgrav - 0.1;
      
    }
    
  }
  
  {
    if(zspeed < 0)
    {
      zspeed = 0;
      
    }
    
  }
  if(action_if(z < 1))
  {
    z = 0;
    
  }
  else
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_collision_74()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,74)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_collision_75()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,75)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    d3d_transform_set_identity();
    d3d_transform_add_translation(x, y, z);
    d3d_set_lighting(0);
    texture_set_interpolation(1);
    texture_set_repeat(1);
    draw_set_color(c_white);
    d3d_model_draw(enigma::varaccess_model_chunk1(int(global)), argument0, argument1, argument2, background_get_texture(chunktex));
    d3d_transform_set_identity();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_friction(0.01);
    
  }
  
  {
    enigma::varaccess_model_chunk1(int(global))= d3d_model_create();
    d3d_model_load(enigma::varaccess_model_chunk1(int(global)), "chunk1.gmmod");
    
  }
  
  {
    if(zgrav == 0)
    {
      zfloor = 1;
      zspeed = 1;
      
    }
    
  }
  
  {
    pitch = 0;
    zfloor = 1;
    zgrav = 0.2;
    
  }
  
  {
    
    {
      z = 10;
      tex = background_get_texture(chunktex);
      
    }
    
  }
  
  {
    argument_relative = 0;
    action_set_motion(random(360), random(1));
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(20, 0);
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(10, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    draw_set_alpha(1);
    
  }
  
  {
    if(zfloor == 1)
    {
      z += zgrav + zspeed;
      zgrav +=- 0.1;
      
    }
    else if(zfloor == 0)
    {
      z += 0;
      zgrav = 0;
      
    }
    
  }
  
  {
    if(z < 1)
    {
      z = 0;
      zgrav = 0;
      zfloor = 0;
      
    }
    
  }
  
  {
    if(zfloor == 1)
    {
      zspeed -=- zgrav - 0.1;
      
    }
    
  }
  
  {
    if(zspeed < 0)
    {
      zspeed = 0;
      
    }
    
  }
  if(action_if(z < 1))
  {
    z = 0;
    
  }
  else
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_collision_74()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,74)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_collision_75()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,75)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk2_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    d3d_transform_set_identity();
    d3d_transform_add_translation(x, y, z);
    texture_set_interpolation(1);
    texture_set_repeat(1);
    draw_set_color(c_white);
    d3d_model_draw(enigma::varaccess_model_chunk1(int(global)), argument0, argument1, argument2, background_get_texture(chunktex));
    d3d_transform_set_identity();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_spr::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_friction(0.01);
    
  }
  
  {
    if(zgrav == 0)
    {
      zfloor = 1;
      zspeed = 0.3;
      
    }
    
  }
  
  {
    pitch = 0;
    zfloor = 1;
    zgrav = 0.2;
    
  }
  
  {
    
    {
      z = random(15);
      tex = background_get_texture(chunktex);
      spr = random(4);
      
    }
    
  }
  
  {
    argument_relative = 0;
    action_set_motion(random(360), random(1));
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(30, 0);
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(150, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_spr::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_gore_spr::myevent_step()
{
  enigma::propagate_locals(this);

  {
    draw_set_alpha(1);
    
  }
  
  {
    if(zfloor == 1)
    {
      z += zgrav + zspeed;
      zgrav +=- 0.1;
      
    }
    else if(zfloor == 0)
    {
      z += 0;
      zgrav = 0;
      
    }
    
  }
  
  {
    if(z < 1)
    {
      z = 0;
      zgrav = 0;
      zfloor = 0;
      
    }
    
  }
  
  {
    if(zfloor == 1)
    {
      zspeed -=- zgrav - 0.1;
      
    }
    
  }
  
  {
    if(zspeed < 0)
    {
      zspeed = 0;
      
    }
    
  }
  if(action_if(z < 1))
  {
    
    {
      argument_relative = 1;
      action_create_object(gore_puddle, 0, 0);
      
    }
    action_kill_object();
    
  }
  else
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_spr::myevent_collision_79()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,79)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(gore_splat, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_spr::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      if(point_distance(x, y, enigma::varaccess_camx(int(global)), enigma::varaccess_camy(int(global)))> 240)
        exit;
      var tex;
      tex = sprite_get_texture(gore, img);
      d3d_draw_wall(x - 4 * enigma::varaccess_camsin(int(global)), y - 4 * enigma::varaccess_camcos(int(global)), z, x + 4 * enigma::varaccess_camsin(int(global)), y + 4 * enigma::varaccess_camcos(int(global)), z + 4, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_puddle::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      img = random(4);
      ran = random(1);
      
    }
    
  }
  
  {
    
    {
      alph = 1;
      
    }
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(150, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_puddle::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
alph +=- 0.005;
  
  {
    argument_relative = 1;
    action_set_alarm(1, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_puddle::myevent_step()
{
  enigma::propagate_locals(this);
image_index = img;
  if(action_if(alph <= 0))
  {
    action_kill_object();
    
  }
  else
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_puddle::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      draw_set_alpha(alph);
      texture_set_interpolation(0);
      d3d_draw_floor(x + 8, y - 8, ran, x - 8, y + 8, ran, sprite_get_texture(blood_puddle, image_index), 1, 1);
      draw_set_alpha(1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_slpat::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 1;
    action_set_alarm(2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_slpat::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_slpat::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      if(point_distance(x, y, enigma::varaccess_camx(int(global)), enigma::varaccess_camy(int(global)))> 240)
        exit;
      var tex;
      tex = sprite_get_texture(splash_spr, image_index);
      d3d_draw_wall(x - 2 * enigma::varaccess_camsin(int(global)), y - 2 * enigma::varaccess_camcos(int(global)), z + 4, x + 2 * enigma::varaccess_camsin(int(global)), y + 2 * enigma::varaccess_camcos(int(global)), z, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_friction(0.01);
    
  }
  
  {
    enigma::varaccess_model_chunk1(int(global))= d3d_model_create();
    d3d_model_load(enigma::varaccess_model_chunk1(int(global)), "chunk1.gmmod");
    
  }
  
  {
    if(zgrav == 0)
    {
      zfloor = 1;
      zspeed = 1;
      
    }
    
  }
  
  {
    pitch = 0;
    zfloor = 1;
    zgrav = 0.2;
    
  }
  
  {
    
    {
      z = 10;
      tex = background_get_texture(chunktex);
      
    }
    
  }
  
  {
    argument_relative = 0;
    action_set_motion(random(360), random(1));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_step()
{
  enigma::propagate_locals(this);

  {
    
    {
      dir += speed * 15;
      
    }
    
  }
  
  {
    if(zfloor == 1)
    {
      z += zgrav + zspeed;
      zgrav +=- 0.1;
      
    }
    else if(zfloor == 0)
    {
      z += 0;
      zgrav = 0;
      
    }
    
  }
  
  {
    draw_set_alpha(1);
    
  }
  
  {
    if(z < 1)
    {
      z = 0;
      zgrav = 0;
      zfloor = 0;
      
    }
    
  }
  
  {
    if(zfloor == 1)
    {
      zspeed -=- zgrav - 0.1;
      
    }
    
  }
  
  {
    if(zspeed < 0)
    {
      zspeed = 0;
      
    }
    
  }
  if(action_if(z < 1))
  {
    z = 0;
    
  }
  else
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_collision_74()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,74)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_collision_75()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,75)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_bounce(1, 1);
  
  return 0;
}

variant enigma::OBJ_chunk3::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(dir);
    d3d_transform_add_rotation_y(dir);
    d3d_transform_add_scaling(4, 4, 4);
    d3d_transform_add_translation(x, y, z + 1);
    texture_set_interpolation(1);
    texture_set_repeat(1);
    draw_set_color(c_white);
    d3d_model_draw(enigma::varaccess_model_chunk1(int(global)), argument0, argument1, argument2, background_get_texture(chunktex));
    d3d_transform_set_identity();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_test::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      z = 0;
      
    }
    
  }
  
  {
    
    {
      maxhealth = 10;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_test::myevent_collision_30()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,30)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    
    {
      maxhealth -= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_test::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      tex = sprite_get_texture(dummy, image_index);
      d3d_draw_wall(x - 8 * enigma::varaccess_camsin(int(global)), y - 8 * enigma::varaccess_camcos(int(global)), 16, x + 8 * enigma::varaccess_camsin(int(global)), y + 8 * enigma::varaccess_camcos(int(global)), 0, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_test::myevent_keypress_32()
{
  
  {
    argument_relative = 1;
    action_create_object(gore_fountaenigmain_last, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_gore_fountaenigmain_last::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(chunk3, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_set_alarm(20, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_fountaenigmain_last::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_gore_fountaenigmain_last::myevent_step()
{
  enigma::propagate_locals(this);

  {
    argument_relative = 1;
    action_create_object(chunk_obj, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(gore_spr, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wallH::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      x1 = x - 16;
      x2 = x + 16;
      y1 = y;
      y2 = y;
      z1 = 35;
      z2 = 0;
      tex = background_get_texture(back);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wallv::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      x1 = x;
      x2 = x;
      y1 = y + 16;
      y2 = y - 16;
      z1 = 35;
      z2 = 0;
      tex = background_get_texture(back);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wallV_basic::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      if(point_distance(x, y, enigma::varaccess_camx(int(global)), enigma::varaccess_camy(int(global)))> 280)
        exit;
      d3d_draw_wall(x1, y1, z1, x2, y2, z2, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wall_Hbasic::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      if(point_distance(x, y, enigma::varaccess_camx(int(global)), enigma::varaccess_camy(int(global)))> 280)
        exit;
      d3d_draw_wall(x1, y1, z1, x2, y2, z2, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
    {
      img = random(4);
      ran = random(1);
      
    }
    
  }
  
  {
    
    {
      z = enigma::varaccess_z(int(gore_spr));
      
    }
    
  }
  
  {
    rot = 0;
    
  }
  
  {
    
    {
      x1 = x;
      y1 = y;
      x2 = x;
      y2 = y;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_step()
{
  enigma::propagate_locals(this);
image_index = img;
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_collision_74()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,74)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    
    {
      x1 = x - 8;
      y1 = y;
      x2 = x + 8;
      y2 = y;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_collision_75()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,75)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    
    {
      x1 = x;
      y1 = y - 8;
      x2 = x;
      y2 = y + 8;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gore_splat::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      texture_set_interpolation(0);
      d3d_draw_wall(x1, y1, z + 0, x2, y2, z + 16, sprite_get_texture(blood_puddle, image_index), 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wall_basic::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    
    {
      if(point_distance(x, y, enigma::varaccess_camx(int(global)), enigma::varaccess_camy(int(global)))> 280)
        exit;
      d3d_draw_wall(x1, y1, z1, x2, y2, z2, tex, 1, 1);
      
    }
    
  }
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
    { NULL, -1 },
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
