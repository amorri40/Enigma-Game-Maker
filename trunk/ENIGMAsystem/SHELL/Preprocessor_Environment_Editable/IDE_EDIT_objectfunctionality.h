/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant _SCR_draw_radar(variant argument0, variant argument1)
{
  with(self)
  {
    
    {
      enigma::varaccess__xx(int(self))= argument0;
      enigma::varaccess__yy(int(self))= argument1;
      enigma::varaccess__ww(int(self))= room_width / (double) 100;
      enigma::varaccess__hh(int(self))= room_height / (double) 100;
      if(enigma::varaccess__ww(int(self))== 0)
        enigma::varaccess__ww(int(self))= 1;
      if(enigma::varaccess__hh(int(self))== 0)
        enigma::varaccess__hh(int(self))= 1;
      draw_set_color(c_black);
      draw_rectangle(enigma::varaccess__xx(int(self)), enigma::varaccess__yy(int(self)), enigma::varaccess__xx(int(self))+ 100, enigma::varaccess__yy(int(self))+ 100, 1);
      with(tank)
        draw_sprite(radartank, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(missle)
        draw_sprite(radarmissle, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(laser)
        draw_sprite(radarlazer, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bullet)
        draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bullet2)
        draw_sprite(radarbullet2, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(HQ)
        draw_sprite(HQradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(hangars)
        draw_sprite(hangarradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bulletv)
        draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(activator1)
        if(enigma::varaccess_mssg1(int(global))== 1)
          draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(activator2)
        if(enigma::varaccess_mssg2(int(global))== 1)
          draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(activator3)
        if(enigma::varaccess_mssg3(int(global))== 1)
          draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(tank1)
        draw_sprite(radartank, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(activator4)
        if(enigma::varaccess_mssg4(int(global))== 1)
          draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      draw_sprite(radartank2, - 1, enigma::varaccess__xx(int(self))+ (mouse_x / (double) enigma::varaccess__ww(int(self))), enigma::varaccess__yy(int(self))+ (mouse_y / (double) enigma::varaccess__hh(int(self))));
      
    }
    
  }
  ;
  
  return 0;
}

variant _SCR_script1()
{
  with(self)
  {
    
    {
      if(enigma::glaccess(int(self))-> bbox_left < 0 && enigma::glaccess(int(self))-> hspeed < 0)
        enigma::glaccess(int(self))-> hspeed =- enigma::glaccess(int(self))-> hspeed;
      if(enigma::glaccess(int(self))-> bbox_right > room_width && enigma::glaccess(int(self))-> hspeed > 0)
        enigma::glaccess(int(self))-> hspeed =- enigma::glaccess(int(self))-> hspeed;
      if(enigma::glaccess(int(self))-> bbox_top < 0 && enigma::glaccess(int(self))-> vspeed < 0)
        enigma::glaccess(int(self))-> vspeed =- enigma::glaccess(int(self))-> vspeed;
      if(enigma::glaccess(int(self))-> bbox_bottom > room_height && enigma::glaccess(int(self))-> vspeed > 0)
        enigma::glaccess(int(self))-> vspeed =- enigma::glaccess(int(self))-> vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant _SCR_script3()
{
  with(self)
  {
    
    {
      enigma::varaccess__xx(int(self))= argument0;
      enigma::varaccess__yy(int(self))= argument1;
      enigma::varaccess__ww(int(self))= room_width / (double) 100;
      enigma::varaccess__hh(int(self))= room_height / (double) 100;
      if(enigma::varaccess__ww(int(self))== 0)
        enigma::varaccess__ww(int(self))= 1;
      if(enigma::varaccess__hh(int(self))== 0)
        enigma::varaccess__hh(int(self))= 1;
      draw_set_color(c_black);
      draw_rectangle(enigma::varaccess__xx(int(self)), enigma::varaccess__yy(int(self)), enigma::varaccess__xx(int(self))+ 100, enigma::varaccess__yy(int(self))+ 100, 0);
      with(enemy_tank)
        draw_sprite(radarenemy1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(enemy_tank2)
        draw_sprite(radarenemy2, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(tank)
        draw_sprite(radartank, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(missle)
        draw_sprite(radarmissle, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(laser)
        draw_sprite(radarlazer, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bullet)
        draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bullet2)
        draw_sprite(radarbullet2, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(HQ)
        draw_sprite(HQradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(hangars)
        draw_sprite(hangarradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      with(bulletv)
        draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
      draw_sprite(radartank2, - 1, enigma::varaccess__xx(int(self))+ (mouse_x / (double) enigma::varaccess__ww(int(self))), enigma::varaccess__yy(int(self))+ (mouse_y / (double) enigma::varaccess__hh(int(self))));
      
    }
    
  }
  ;
  
  return 0;
}

variant _SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  with(self)
  {
    var sprite, subimage, text;
    var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
    var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
    var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
    var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
    var ix1, iy1, ix2, iy2;
    var oc, oa;
    sprite = argument0;
    subimage = argument1;
    text = argument2;
    x1 = view_xport[0] + 0;
    y1 = view_yport[0] + 352;
    x2 = view_xport[0] + 416;
    y2 = view_yport[0] + 446;
    sprite_hmargin = 10;
    sprite_vmargin = 10;
    text_hmargin = 20;
    text_vmargin = 20;
    line_height = 1;
    border_color1 = c_white;
    border_color2 = c_white;
    border_thickness = 5;
    fill_color1 = c_white;
    fill_color2 = c_white;
    text_color = c_white;
    border_alpha1 = 0.6;
    border_alpha2 = 0.4;
    fill_alpha1 = 1;
    fill_alpha2 = 1;
    background = bck_textbox;
    continue_sprite = spr_continue;
    continue_key = ord("Z");
    escape_key = vk_escape;
    speed_factor = 1;
    sound = snd_type;
    animation_speed = 0.5;
    open = 0;
    oc = draw_get_color();
    oa = draw_get_alpha();
    split = 0;
    window_set_visible(1);
    screen_redraw();
    line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    draw_set_halign(enigma::varaccess_fa_left(int(self)));
    draw_set_valign(enigma::varaccess_fa_top(int(self)));
    keyboard_clear(continue_key);
    if(is_string(argument3))
      open = 0;
    ix1 = x1;
    iy1 = y1;
    ix2 = x2;
    iy2 = y2;
    x1 +=(x2 - x1)/ (double) 2;
    y1 +=(y2 - y1)/ (double) 2;
    x2 = x1;
    y2 = y1;
    while(1)
    {
      if(open)
      {
        x1 = enigma_max(x1 - 4, ix1);
        x2 = enigma_min(x2 + 4, ix2);
        y1 = enigma_max(y1 - 2, iy1);
        y2 = enigma_min(y2 + 2, iy2);
        
      }
      else
      {
        x1 = ix1;
        y1 = iy1;
        x2 = ix2;
        y2 = iy2;
        
      }
      if(! background_exists(background))
      {
        if(enigma::varaccess_gamemaker_registered(int(self)))
        {
          draw_primitive_begin(pr_trianglelist);
          draw_vertex_color(x1, y1, border_color1, border_alpha1);
          draw_vertex_color(x2, y1, border_color1, border_alpha1);
          draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x2, y1, border_color1, border_alpha1);
          draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
          draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x1, y2, border_color2, border_alpha2);
          draw_vertex_color(x2, y2, border_color2, border_alpha2);
          draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x2, y2, border_color2, border_alpha2);
          draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
          draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
          draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
          draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
          draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
          draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
          draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
          draw_primitive_end();
          
        }
        else
        {
          draw_set_color(border_color1);
          draw_set_alpha(border_alpha1);
          draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
          draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
          draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
          draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
          draw_set_color(fill_color1);
          draw_set_alpha(fill_alpha1);
          draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
          
        }
        
      }
      else
      {
        if(enigma::varaccess_gamemaker_registered(int(self)))
        {
          draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
          draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
          draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
          draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
          draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
          draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
          draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
          draw_primitive_end();
          
        }
        else
        {
          draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
          
        }
        
      }
      if(open)
      {
        screen_refresh();
        sleep(5);
        
      }
      if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
        break;
      
    }
    draw_set_alpha(1);
    if(sprite_exists(sprite))
    {
      x1 += sprite_hmargin;
      if(subimage !=- 1)
        draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
      else img = 0;
      x1 += sprite_get_width(sprite);
      
    }
    x1 += text_hmargin;
    y1 += text_vmargin;
    x2 -= text_hmargin;
    y2 -= text_vmargin;
    cx = x1;
    cy = y1;
    cc = text_color;
    m = 0;
    i = 1;
    skip = 0;
    while(1)
    {
      io_handle();
      if(escape_key !=- 1)
        if(keyboard_check(escape_key))
          exit;
      if(subimage ==- 1)
        if(sprite_exists(sprite))
      {
        draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
        img += animation_speed;
        if(enigma_floor(img)>= sprite_get_number(sprite))
          img = 0;
        
      }
      c = string_char_at(text, i);
      if(c =="\\")
      {
        if((string_char_at(text, i + 1)=="\n")
          or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
        {
          i += 1;
          if(i > string_length(text))
            break;
          enigma::varaccess_enigmacontinue(int(self));
          
        }
        
      }
      else if(c =="\n")
      {
        if(string_char_at(text, i - 1)!="\\")
        {
          cy += line_height;
          cx = x1;
          i += 1;
          if(i > string_length(text))
            break;
          sleep(80);
          enigma::varaccess_enigmacontinue(int(self));
          
        }
        else c ="#";
        
      }
      else if(c =="[")
      {
        if(string_char_at(text, i - 1)=="\\")
        {
          c ="\\"+ c;
          
        }
        else
        {
          code ="";
          i += 1;
          c = string_char_at(text, i);
          while(c !="]")
          {
            code += c;
            i += 1;
            if(i > string_length(text))
              break;
            c = string_char_at(text, i);
            
          }
          if(c =="]")cc = execute_string("return "+ code);
          i += 1;
          if(i > string_length(text))
            break;
          enigma::varaccess_enigmacontinue(int(self));
          
        }
        
      }
      else if(c =="|")
      {
        if(string_char_at(text, i - 1)!="\\")
        {
          i += 1;
          if(i > string_length(text))
            break;
          sleep(80);
          enigma::varaccess_enigmacontinue(int(self));
          
        }
        
      }
      if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
        )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
      {
        w = 0;
        ii = i;
        n = 0;
        ci = c;
        while((ci !=" ")
          && (ci !="-"))
        {
          if(ci =="[")n = 1;
          if((ci =="\\")
            && (string_char_at(text, ii + 1)=="\n"))
          {
            ii += 1;
            if(ii > string_length(text))
              break;
            enigma::varaccess_enigmacontinue(int(self));
            
          }
          if(ci =="\n")
          {
            if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
            else break;
            
          }
          if((! n)&& (ci !="\\")
            )w += string_width(ci);
          if(cx + w > x2)
            break;
          ii += 1;
          if(ii > string_length(text))
            break;
          ci = string_char_at(text, ii);
          if(ci =="]")n = 0;
          
        }
        if(cx + w > x2)
        {
          if(x1 + w <= x2)
          {
            cy += line_height;
            cx = x1;
            
          }
          else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
          
        }
        
      }
      if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
      {
        x2 -= sprite_get_width(continue_sprite);
        m = 1;
        
      }
      if(cy + line_height > y2)
      {
        split = 1;
        break;
        
      }
      if(keyboard_check(continue_key))
        skip = 1;
      if(! skip)
        if((sound_exists(sound))&& (c !=" ")
          )sound_play(sound);
      draw_set_color(cc);
      draw_text(cx, cy, c);
      cx += string_width(c);
      i += 1;
      if(i > string_length(text))
        break;
      if(! skip)
      {
        screen_refresh();
        sleep(40 * speed_factor);
        
      }
      
    }
    ii = 0;
    n = 0;
    if(! m)
      x2 -= sprite_get_width(continue_sprite);
    if(sprite_exists(sprite))
      draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
    while(1)
    {
      io_handle();
      if(escape_key !=- 1)
        if(keyboard_check(escape_key))
          exit;
      if((keyboard_check(continue_key))&& (n))
        break;
      if(! keyboard_check(continue_key))
        n = 1;
      draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
      ii += 1;
      if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
        ii = 0;
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    draw_set_color(oc);
    draw_set_alpha(oa);
    if(split)
      textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_health1(int(global))= 0;
    enigma::varaccess_health(int(global))= 100;
    enigma::varaccess_dd(int(global))= 0;
    direction = 0;
    friction = 0.05;
    enigma::varaccess_discovered(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(direction == 360)
      direction = 0;
    if(instance_exists(enemy_tank)and distance_to_object(instance_nearest(x, y, enemy_tank))< 600)
    {
      enigma::varaccess_discovered(int(global))= 1;
      
    }
    else
    {
      enigma::varaccess_discovered(int(global))= 0;
      
    }
    if(instance_exists(enemy_tank2)and distance_to_object(instance_nearest(x, y, enemy_tank2))< 600)
    {
      enigma::varaccess_discovered(int(global))= 1;
      
    }
    else
    {
      enigma::varaccess_discovered(int(global))= 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health(int(global))+=- 3;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_21()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,21)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health(int(global))+=- 3;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_29()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,29)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health(int(global))+=- 7;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_30()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,30)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health(int(global))+=- 6;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_43()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,43)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_44()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,44)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health(int(global))+=- 3;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_113()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,113)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_collision_114()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,114)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_0()
{
  
  {
    speed -= 0.1;
    if(speed < 0)
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_13()
{
  
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_16()
{
  if(action_if_next_room())
    action_next_room(13);
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_37()
{
  
  {
    direction += 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_38()
{
  
  {
    speed += 0.25;
    if(speed > 6)
      speed = 6;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_39()
{
  
  {
    direction -= 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyboard_40()
{
  
  {
    speed -= 0.2;
    if(speed < - 3)
    {
      speed =- 3;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(enigma::varaccess_dd(int(global))== 1)
    {
      draw_set_color(c_green);
      draw_rectangle(x - 25, y - 25, x + 25, y + 25, 1);
      
    }
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank::myevent_keyrelease_13()
{
  
  {
    if(enigma::varaccess_dd(int(global))== 1)
      enigma::varaccess_dd(int(global))= 0;
    else enigma::varaccess_dd(int(global))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 15;
    can_shoot = 1;
    enigma::varaccess_health1(int(global))= 0;
    automatic = 0;
    enigma::varaccess_explo(int(global))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank))-> x;
    y = enigma::glaccess(int(tank))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1 and automatic == 0)
    {
      instance_create(x, y, bullet);
      can_shoot = 0;
      enigma::varaccess_health1(int(global))+= 2;
      alarm[0]= 15;
      if(enigma::varaccess_health1(int(global))> 100)
        enigma::varaccess_health(int(global))+=- 1;
      
    }
    if(can_shoot and automatic == 1)
    {
      instance_create(x, y, bulletv);
      enigma::varaccess_health1(int(global))+= 2;
      can_shoot = 0;
      alarm[0]= 2.5;
      if(enigma::varaccess_health1(int(global))> 100)
        enigma::varaccess_health(int(global))+=- 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_globalrightbutton()
{
  
  {
    automatic = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_globalmiddlebutton()
{
  
  {
    automatic = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turret1, ((double) direction)/ (double) 10, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(turret1))-> direction;
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_dest::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dest::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_cursor1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = mouse_x;
    y = mouse_y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, enemyturret)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_controller::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_dd(int(global))= 0;
    enigma::varaccess_explo(int(global))= 0;
    enigma::varaccess_health(int(global))= 100;
    enigma::varaccess_health1(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    room_goto(title);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_health1(int(global))> 0)
    {
      enigma::varaccess_health1(int(global))+=- .4;
      
    }
    if(enigma::varaccess_health(int(global))< 1 and instance_exists(tank))
    {
      instance_create(enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y, explosion);
      instance_create(enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y, dest);
      alarm[0]= 100;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_healthbar(view_xview[0] + 70, view_yview[0] + 25, view_xview[0] + 170, view_yview[0] + 35, enigma::varaccess_health(int(global)), c_black, c_red, c_green, 0, 1, 1);
    
  }
  
  {
    draw_healthbar(view_xview[0] + 70, view_yview[0] + 37, view_xview[0] + 170, view_yview[0] + 47, enigma::varaccess_health1(int(global)), c_teal, c_teal, c_red, 0, 1, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    collide = 0;
    b2h = 30;
    alarm[0]= 40;
    direction = enigmaround(random(360));
    speed = 4;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    bac = 0;
    ac = 0;
    tankradius = 0;
    enigma::varaccess_dd(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(tank))
    {
      t = tank;
      tx = enigma::glaccess(int(tank))-> x;
      ty = enigma::glaccess(int(tank))-> y;
      
    }
    else
    {
      t = controller;
      tx = enigma::glaccess(int(controller))-> x;
      ty = enigma::glaccess(int(controller))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1;
    else ac = 0;
    if(ac == 1)
    {
      if(distance_to_point(tx, ty)< rad)
        sh = 1;
      else sh = 0;
      if(sh == 1)
      {
        friction = .2;
        
      }
      else
      {
        p = point_direction(x, y, tx, ty);
        if(direction != p)
        {
          if(direction < p)
            direction += 4;
          if(direction > p)
            direction -= 4;
          
        }
        speed = 4;
        friction = 0;
        
      }
      
    }
    else friction = .2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      argument_relative = 1;
      action_create_object(dest, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_15()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,15)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 15;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_16()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,16)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 10;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 1;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_25()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,25)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  
  {
    instance_create(x, y, dest);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_45()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,45)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 2;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      argument_relative = 1;
      action_create_object(dest, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- .5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_collision_63()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,63)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  
  {
    instance_create(x, y, dest);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_explosion::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, enemy_tank);
    priority = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1)
    {
      instance_create(x, y, baddybullet);
      
    }
    alarm[0]= random(30)+ 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turrete1, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, enemy_tank)))-> x, enigma::glaccess(int(instance_nearest(x, y, enemy_tank)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    b2h = 36;
    alarm[0]= 40;
    direction = enigmaround(random(360));
    speed = 4;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    ac = 0;
    bac = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(tank))
    {
      t = tank;
      tx = enigma::glaccess(int(tank))-> x;
      ty = enigma::glaccess(int(tank))-> y;
      
    }
    else
    {
      t = controller;
      tx = enigma::glaccess(int(controller))-> x;
      ty = enigma::glaccess(int(controller))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1;
    else ac = 0;
    if(ac == 1)
    {
      if(distance_to_point(tx, ty)< rad)
        sh = 1;
      else sh = 0;
      if(sh == 1)
      {
        friction = .2;
        
      }
      else
      {
        p = point_direction(x, y, tx, ty);
        if(direction != p)
        {
          if(direction < p)
            direction += 4;
          if(direction > p)
            direction -= 4;
          
        }
        speed = 4;
        friction = 0;
        
      }
      
    }
    else friction = .2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 3;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_15()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,15)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 10;
  if(action_if_variable(b2h, 25, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_16()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,16)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 10;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- .8;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_25()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,25)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  
  {
    instance_create(x, y, dest);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 1.5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- .8;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_collision_63()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,63)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    instance_create(x, y, dest);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tank2::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, enemy_tank2);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1)
    {
      instance_create(x, y, baddybullet2);
      
    }
    alarm[0]= random(30)+ 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret2::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turrete2, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, enemy_tank2)))-> x, enigma::glaccess(int(instance_nearest(x, y, enemy_tank2)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_health1(int(global))= 0;
    alarm[0]= 14;
    alarm[3]= 14;
    can_shoot = 1;
    an_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_alarm_3()
{
  { if ((alarm[3] == -1) or (alarm[3]--)) return 0; }

  {
    an_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank))-> x;
    y = enigma::glaccess(int(tank))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1)
    {
      instance_create(x, y, laser);
      enigma::varaccess_health1(int(global))+= 25;
      can_shoot = 0;
      alarm[0]= 25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_globalrightbutton()
{
  
  {
    if(an_shoot == 1)
    {
      instance_create(x, y, bullet4);
      an_shoot = 0;
      alarm[3]= 15;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_globalleftrelease()
{
  
  {
    if(enigma::varaccess_health1(int(global))> 100)
    {
      enigma::varaccess_health(int(global))+=- 10;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turrret::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turretmissle, ((double) direction)/ (double) 10, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound3, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(missle_turrret))-> direction;
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_laser::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_missle::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    speed = 7;
    direction = enigma::glaccess(int(missle_turret))-> direction;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    speed += 2;
    instance_create(x, y, smoke);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_health1(int(global))= 0;
    alarm[0]= 14;
    alarm[3]= 14;
    alarm[1]= 14;
    can_shoot = 1;
    can_shoo = 1;
    an_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_alarm_3()
{
  { if ((alarm[3] == -1) or (alarm[3]--)) return 0; }

  {
    an_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank))-> x;
    y = enigma::glaccess(int(tank))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1)
    {
      instance_create(x, y, missle);
      enigma::varaccess_health1(int(global))+= 25;
      can_shoot = 0;
      alarm[0]= 25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_globalleftrelease()
{
  
  {
    if(enigma::varaccess_health1(int(global))> 100)
    {
      enigma::varaccess_health(int(global))+=- 10;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_missle_turret::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turretmissle, ((double) direction)/ (double) 10, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_health1(int(global))= 0;
    alarm[0]= 4;
    alarm[1]= 4;
    can_shoot = 1;
    can_shoo = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    can_shoo = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank))-> x;
    y = enigma::glaccess(int(tank))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1)
    {
      instance_create(x, y + 3, bullet2);
      enigma::varaccess_health1(int(global))+= 1.5;
      can_shoot = 0;
      alarm[0]= 5;
      
    }
    if(can_shoo == 1)
    {
      instance_create(x, y - 3, bullet2);
      enigma::varaccess_health1(int(global))+= 1.5;
      can_shoo = 0;
      alarm[1]= 5;
      
    }
    
  }
  
  {
    if(enigma::varaccess_health1(int(global))> 100)
    {
      enigma::varaccess_health(int(global))+=- .5;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmaauto::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turretauto, ((double) direction)/ (double) 10, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound1, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(enigmaauto))-> direction;
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet2::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_flag::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, enemyturret2)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet2::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet2::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet2::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_explo2::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 15;
    can_shoot = 1;
    enigma::varaccess_health1(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank))-> x;
    y = enigma::glaccess(int(tank))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1)
    {
      instance_create(x, y, boomlazer);
      can_shoot = 0;
      enigma::varaccess_health1(int(global))+= 20;
      alarm[0]= 30;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomtu::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(boomt, ((double) direction)/ (double) 10, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(boomtu))-> direction;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_boomlazer::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_dest2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_kill_object();
  
  {
    argument_relative = 0;
    action_set_alarm(2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dest2::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 25;
    hold = instance_nearest(x, y, enemy_tank2);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1)
    {
      instance_create(x, y, baddybullet3);
      
    }
    alarm[0]= random(30)+ 25;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret3::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turrete4, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, enemy_tank2)))-> x, enigma::glaccess(int(instance_nearest(x, y, enemy_tank2)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet3::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound3, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, enemyturret3)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet3::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet3::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet3::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_baddybullet4::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, enemyturret4)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet4::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet4::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet4::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, enemy_tank);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1)
    {
      instance_create(x, y, baddybullet4);
      
    }
    alarm[0]= random(10)+ 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturret4::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(turrete5, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, enemy_tank)))-> x, enigma::glaccess(int(instance_nearest(x, y, enemy_tank)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_minimap::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    
    {
      draw_x = view_xview[0] + view_wview[0] - 100;
      draw_y = view_yview[0];
      if(draw_x == 0)
        draw_x = room_wview - 100;
      if(draw_y == 0)
        draw_y = 0;
      draw_radar(draw_x, draw_y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_obj_minimap::_SCR_draw_radar(variant argument0, variant argument1)
{
  
  {
    _xx = argument0;
    _yy = argument1;
    _ww = room_width / (double) 100;
    _hh = room_height / (double) 100;
    if(_ww == 0)
      _ww = 1;
    if(_hh == 0)
      _hh = 1;
    draw_set_color(c_black);
    draw_rectangle(_xx, _yy, _xx + 100, _yy + 100, 1);
    with(tank)
      draw_sprite(radartank, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(missle)
      draw_sprite(radarmissle, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(laser)
      draw_sprite(radarlazer, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(bullet)
      draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(bullet2)
      draw_sprite(radarbullet2, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(HQ)
      draw_sprite(HQradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(hangars)
      draw_sprite(hangarradar, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(bulletv)
      draw_sprite(radarbullet1, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(activator1)
      if(enigma::varaccess_mssg1(int(global))== 1)
        draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(activator2)
      if(enigma::varaccess_mssg2(int(global))== 1)
        draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(activator3)
      if(enigma::varaccess_mssg3(int(global))== 1)
        draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(tank1)
      draw_sprite(radartank, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    with(activator4)
      if(enigma::varaccess_mssg4(int(global))== 1)
        draw_sprite(objective_marker, - 1, enigma::varaccess__xx(int(other))+ (enigma::glaccess(int(self))-> x / (double) enigma::varaccess__ww(int(other))), enigma::varaccess__yy(int(other))+ (enigma::glaccess(int(self))-> y / (double) enigma::varaccess__hh(int(other))));
    draw_sprite(radartank2, - 1, _xx + (mouse_x / (double) _ww), _yy + (mouse_y / (double) _hh));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_title::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_title::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    sprite_index = titlesp2;
    image_speed = .5;
    soundt = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_title::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    sprite_index = titlesp;
    soundt = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_15()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,15)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_16()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,16)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_25()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,25)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::myevent_collision_91()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,91)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    textbox(thingo, 0, "What the hell are you doing!?");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_HQ::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, base);
    alarm[1]= 20;
    youcanshoot = 1;
    bth = 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1 and youcanshoot == 1)
    {
      instance_create(x, y, baddybullet5);
      
    }
    alarm[0]= 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    youcanshoot = 0;
    alarm[3]= 30;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_alarm_3()
{
  { if ((alarm[3] == -1) or (alarm[3]--)) return 0; }

  {
    youcanshoot = 1;
    alarm[1]= 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank))-> x, enigma::glaccess(int(tank))-> y);
      
    }
    if(bth < 1)
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 2;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_15()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,15)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 10;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_16()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,16)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 20;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 1.5;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_25()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,25)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 20;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  bth +=- 1;
  
  return 0;
}

variant enigma::OBJ_baseturret::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(baseturretto, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, base)))-> x, enigma::glaccess(int(instance_nearest(x, y, base)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet5::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, baseturret)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet5::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet5::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet5::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_base::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_dd(int(global))= 0;
    alarm[0]= 40;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    ac = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_base::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(tank))
    {
      t = tank;
      tx = enigma::glaccess(int(tank))-> x;
      ty = enigma::glaccess(int(tank))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1;
    else ac = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_base::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_base::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(turret1))-> direction - random(10)+ random(10);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bulletv::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_someting::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_someting::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(missle_turrret))-> direction;
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet4::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_flamb::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    direction = enigma::glaccess(int(missle_turret))-> direction;
    speed = 15;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_flamb::myevent_step()
{
  enigma::propagate_locals(this);

  {
    instance_create(x, y, explosionb);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_explosionb::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_smoke::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_smoke::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_allie::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    b2h = 36;
    alarm[0]= 40;
    direction = enigmaround(random(360));
    speed = 4;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    ac = 0;
    bac = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(enemy_tank2))
    {
      t = enemy_tank;
      tx = enigma::glaccess(int(enemy_tank))-> x;
      ty = enigma::glaccess(int(enemy_tank))-> y;
      
    }
    else
    {
      t = controller;
      tx = enigma::glaccess(int(controller))-> x;
      ty = enigma::glaccess(int(controller))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1;
    else ac = 0;
    if(ac == 1)
    {
      if(distance_to_point(tx, ty)< rad)
        sh = 1;
      else sh = 0;
      if(sh == 1)
      {
        friction = .2;
        
      }
      else
      {
        p = point_direction(x, y, tx, ty);
        if(direction != p)
        {
          if(direction < p)
            direction += 4;
          if(direction > p)
            direction -= 4;
          
        }
        speed = 4;
        friction = 0;
        
      }
      
    }
    else friction = .2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 3;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_15()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,15)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 10;
  if(action_if_variable(b2h, 25, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_16()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,16)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 10;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- .8;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_21()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,21)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_25()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,25)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    instance_create(x, y, dest);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_29()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,29)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 25;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_44()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,44)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 7;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 1.5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- .8;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_63()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,63)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    instance_create(x, y, dest);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(explo2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(enigma::varaccess_dd(int(global))== 1)
    {
      if(ac == 1)
        draw_set_color(c_yellow);
      else draw_set_color(c_gray);
      draw_circle(x, y, snore_rad, 0);
      if(sh == 1)
        draw_set_color(c_red);
      else draw_set_color(c_black);
      draw_circle(x, y, rad, 0);
      
    }
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, allie);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1)
    {
      instance_create(x, y, alliedbullet);
      
    }
    alarm[0]= random(30)+ 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(enemy_tank))
    {
      direction = point_direction(x, y, enigma::glaccess(int(enemy_tank))-> x, enigma::glaccess(int(enemy_tank))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_allie_turret::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(allie_turret_sp, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, allie)))-> x, enigma::glaccess(int(instance_nearest(x, y, allie)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_alliedbullet::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, allie)))-> direction - random(10)+ random(10);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_alliedbullet::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_alliedbullet::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_mmc1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_welcome(int(global))= 0;
    enigma::varaccess_act1(int(global))= 0;
    enigma::varaccess_act2(int(global))= 0;
    enigma::varaccess_act3(int(global))= 0;
    enigma::varaccess_act4(int(global))= 0;
    alarm[0]= 4;
    alarm[1]= 200;
    enigma::varaccess_mssg1(int(global))= 1;
    enigma::varaccess_mssg2(int(global))= 0;
    enigma::varaccess_mssg3(int(global))= 0;
    enigma::varaccess_mssg4(int(global))= 0;
    enigma::varaccess_mssg5(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mmc1::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(room == level1)
    {
      textbox(HQrank, 0, "Welcome to Camp Micinley , recruit.||||| Here , your combat skills will be tested by several live fire drills.||| Good Luck.|||Use The Arrow keys to move.||| Proceed to headquraters.");
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mmc1::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    if(room == level1)
    {
      textbox(HQrank, 0, "HQ:If you're having trouble finding your objective , |||Look at the minimap.||| See that blinking dot?||| Thats youre objective. If you have a visible obj. , itll always be on the enigmamap .");
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mmc1::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

variant enigma::OBJ_activator1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    shoot = 1;
    message = 0;
    range = 0;
    range2 = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(tank))
      range = 1;
    if(instance_exists(tank1))
      range2 = 1;
    if(distance_to_object(tank)< 2 and range == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(distance_to_object(tank1)< 2 and range2 == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(message == 1)
    {
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator1::myevent_collision_83()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,83)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(message == 0 and room == level1)
    {
      textbox(HQrank, 0, "HQ: Hello_recruit.||| Your the only one on the field today so you have the shooting range to yourself and we can concentrate on you.||||| Proceed to the next objective and destoy the dummies we've set up there.|||Remember the top bar is the health bar and below that is the heat meter. If you overheat from shooting too much , | you'll lose health.||| Though I doubt that will happen against dummies.||| We'll talk again after you're done.");
      message = 1;
      enigma::varaccess_mssg2(int(global))= 1;
      enigma::varaccess_goahead2(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator1::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

variant enigma::OBJ_messenger::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_messenger::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_health3(int(global))= 0;
    enigma::varaccess_health2(int(global))= 100;
    enigma::varaccess_dd(int(global))= 0;
    direction = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(direction == 360)
      direction = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 3;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_21()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,21)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 3;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_30()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,30)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 6;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_44()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,44)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 5;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_102()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,102)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_106()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,106)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 4;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_109()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,109)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
enigma::varaccess_health2(int(global))+=- 4;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_113()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,113)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_collision_114()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,114)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(keyboard_check(vk_nokey))
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_0()
{
  
  {
    speed -= 0.2;
    if(speed < 0)
    {
      speed = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_16()
{
  if(action_if_next_room())
    action_next_room(13);
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_37()
{
  
  {
    direction += 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_38()
{
  
  {
    speed += 0.25;
    if(speed > 6)
      speed = 6;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_39()
{
  
  {
    direction -= 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_keyboard_40()
{
  
  {
    speed -= 0.2;
    if(speed < - 3)
    {
      speed =- 3;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tank1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 15;
    can_shoot = 1;
    automatic = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    can_shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_step()
{
  enigma::propagate_locals(this);

  {
    direction = point_direction(x, y, mouse_x, mouse_y);
    x = enigma::glaccess(int(tank1))-> x;
    y = enigma::glaccess(int(tank1))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_globalleftbutton()
{
  
  {
    if(can_shoot == 1 and automatic == 0)
    {
      instance_create(x, y, bullet5);
      can_shoot = 0;
      enigma::varaccess_health3(int(global))+= 5;
      alarm[0]= 15;
      if(enigma::varaccess_health3(int(global))> 100)
        enigma::varaccess_health2(int(global))+=- 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_turret2::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(allie_turret_sp, ((double) direction)/ (double) 10, enigma::glaccess(int(tank1))-> x, enigma::glaccess(int(tank1))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_dd(int(global))= 0;
    enigma::varaccess_explo(int(global))= 0;
    enigma::varaccess_health2(int(global))= 100;
    enigma::varaccess_health3(int(global))= 0;
    if(room == level1)
    {
      enigma::varaccess_goahead(int(global))= 0;
      
    }
    else
    {
      enigma::varaccess_goahead(int(global))= 1;
      
    }
    if(room == level1)
    {
      enigma::varaccess_goahead2(int(global))= 0;
      
    }
    else
    {
      enigma::varaccess_goahead2(int(global))= 1;
      
    }
    if(room == level1)
    {
      enigma::varaccess_attack(int(global))= 0;
      
    }
    else
    {
      enigma::varaccess_attack(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller2::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    room_goto(title);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller2::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_health3(int(global))> 0)
    {
      enigma::varaccess_health3(int(global))+=- .4;
      
    }
    if(enigma::varaccess_health2(int(global))< 1 and instance_exists(tank1))
    {
      instance_create(enigma::glaccess(int(tank1))-> x, enigma::glaccess(int(tank1))-> y, explosion);
      instance_create(enigma::glaccess(int(tank1))-> x, enigma::glaccess(int(tank1))-> y, dest);
      alarm[0]= 100;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller2::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_healthbar(view_xview[0] + 70, view_yview[0] + 25, view_xview[0] + 170, view_yview[0] + 35, enigma::varaccess_health2(int(global)), c_black, c_red, c_green, 0, 1, 1);
    
  }
  
  {
    draw_healthbar(view_xview[0] + 70, view_yview[0] + 37, view_xview[0] + 170, view_yview[0] + 47, enigma::varaccess_health3(int(global)), c_teal, c_teal, c_red, 0, 1, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 30;
    direction = enigma::glaccess(int(turret2))-> direction;
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_8()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,8)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_34()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,34)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_37()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,37)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_38()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,38)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_102()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,102)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_collision_104()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,104)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bullet5::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_activator2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    shoot = 1;
    message = 0;
    range = 0;
    range2 = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator2::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(tank))
      range = 1;
    if(instance_exists(tank1))
      range2 = 1;
    if(distance_to_object(tank)< 2 and range == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(distance_to_object(tank1)< 2 and range2 == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(message == 1)
    {
      instance_destroy();
      
    }
    if(instance_exists(activator1))
    {
      
    }
    else
    {
      enigma::varaccess_mssg1(int(global))= 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator2::myevent_collision_83()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,83)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(message == 0 and room == level1 and enigma::varaccess_mssg2(int(global))== 1)
    {
      textbox(HQrank, 0, "HQ: Good job!||| Now at your next objective , |there will be a enigmaauto defense turret , | that we...||| heh...|||| borrowed from the confederacy.||| Now enigmathis a live fire excercise so you can actually die over there.||| But , as long as you shoot back you win out.||| Heres a tip , ||| Keep moving , |Its ! the most accurate thing enigmain the world so go blast that bugger!");
      message = 1;
      enigma::varaccess_mssg3(int(global))= 1;
      enigma::varaccess_goahead(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator2::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

variant enigma::OBJ_activator3::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    shoot = 1;
    message = 0;
    range = 0;
    range2 = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator3::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(tank))
      range = 1;
    if(instance_exists(tank1))
      range2 = 1;
    if(distance_to_object(tank)< 1 and range == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(distance_to_object(tank1)< 1 and range2 == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(message == 1)
    {
      instance_destroy();
      
    }
    if(instance_exists(activator2))
    {
      
    }
    else
    {
      enigma::varaccess_mssg2(int(global))= 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator3::myevent_collision_83()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,83)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(message == 0 and room == level1 and enigma::varaccess_mssg3(int(global))== 1)
    {
      textbox(HQrank, 0, "HQ: Great!|||Now you can go back to the...||||| \n Wait!||||| What the hell!?||| We've got a Confederate raid on the eastern periemeter of our camp!!!||| Its pretty small but enigmathis camp was established only two weeks ago so we only have the complete basics.||| Not to mention only trainees and a couple of veterans.|||all of the tanks are enigmain the shop right now and itll take a while before I can get them scrambled.||| This is bad.||| Its a lot to ask for but can you hold them off for a while? |||I'll get you help as fast as I can.|||Good luck soldier.|||HQ:out.");
      message = 1;
      enigma::varaccess_mssg4(int(global))= 1;
      enigma::varaccess_attack(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator3::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    speed = .7;
    direction = 90;
    alarm[0]= 800;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_next_room(0);
  
  return 0;
}

variant enigma::OBJ_intro::myevent_globalleftbutton()
{
  action_next_room(0);
  
  return 0;
}

variant enigma::OBJ_enigmatm::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmatm::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    shoot = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enigmatm::myevent_globalleftbutton()
{
  
  {
    if(shoot == 1)
    {
      instance_create(enigma::glaccess(int(cursor1))-> x, enigma::glaccess(int(cursor1))-> y, tmm);
      alarm[0]= 20;
      shoot = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tmm::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= 2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tmm::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_NEW::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    NEWV = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_NEW::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(distance_to_object(cursor1)< 1)
    {
      NEWV = 1;
      
    }
    else
    {
      NEWV = 0;
      
    }
    if(NEWV == 1)
    {
      sprite_index = NEW2_sp;
      
    }
    else
    {
      sprite_index = NEW_sp;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_NEW::myevent_collision_98()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,98)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_next_room(0);
  
  return 0;
}

variant enigma::OBJ_LOAD::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    LOADV = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_LOAD::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(distance_to_object(cursor1)< 1)
    {
      LOADV = 1;
      
    }
    else
    {
      LOADV = 0;
      
    }
    if(LOADV == 1)
    {
      sprite_index = LOAD2_sp;
      
    }
    else
    {
      sprite_index = LOAD_sp;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_OPTION::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    OPTIONV = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_OPTION::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(distance_to_object(cursor1)< 1)
    {
      OPTIONV = 1;
      
    }
    else
    {
      OPTIONV = 0;
      
    }
    if(OPTIONV == 1)
    {
      sprite_index = OPTION2_sp;
      
    }
    else
    {
      sprite_index = OPTION_sp;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dummy::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    dh = 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dummy::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(dh < 1)
    {
      instance_create(x, y, dest);
      
    }
    image_single =((double) direction)/ (double) 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dummy::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_dummy::myevent_collision_91()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,91)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(enigma::varaccess_goahead2(int(global))== 1)
    {
      instance_create(x, y, explosion);
      dh +=- 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dummyt::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_single =((double) direction)/ (double) 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dummyt::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    instance_create(x, y, explosion);
    instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    collide = 0;
    b2h = 30;
    alarm[0]= 40;
    direction = enigmaround(random(360));
    speed = 4;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    bac = 0;
    ac = 0;
    tankradius = 0;
    enigma::varaccess_dd(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(tank1))
    {
      t = tank1;
      tx = enigma::glaccess(int(tank1))-> x;
      ty = enigma::glaccess(int(tank1))-> y;
      
    }
    else
    {
      t = controller2;
      tx = enigma::glaccess(int(controller2))-> x;
      ty = enigma::glaccess(int(controller2))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1 and enigma::varaccess_attack(int(global))== 1;
    else ac = 0;
    if(ac == 1)
    {
      if(distance_to_point(tx, ty)< rad)
        sh = 1;
      else sh = 0;
      if(sh == 1)
      {
        friction = .2;
        
      }
      else
      {
        p = point_direction(x, y, tx, ty);
        if(direction != p)
        {
          if(direction < p)
            direction += 4;
          if(direction > p)
            direction -= 4;
          
        }
        speed = 4;
        friction = 0;
        
      }
      
    }
    else friction = .2;
    if(enigma::varaccess_attack(int(global))== 0)
      image_alpha = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 5;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      argument_relative = 1;
      action_create_object(dest, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_19()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,19)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 1;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_46()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,46)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 2;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      argument_relative = 1;
      action_create_object(dest, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 1;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_87()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,87)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_91()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,91)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
bac = 1;
  b2h +=- 2;
  if(action_if_variable(b2h, 1, 1))
  {
    
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_104()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,104)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_collision_107()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,107)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    hspeed =- hspeed;
    vspeed =- vspeed;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemy_tankt1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(enigma::varaccess_attack(int(global))== 1)
    {
      draw_sprite(sprite_index, image_index, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, enemy_tankt1);
    priority = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1 and enigma::varaccess_attack(int(global))== 1)
    {
      instance_create(x, y, baddybullet6);
      
    }
    alarm[0]= random(30)+ 10;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank1))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank1))-> x, enigma::glaccess(int(tank1))-> y);
      
    }
    if(enigma::varaccess_attack(int(global))== 0)
      image_alpha = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_collision_26()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,26)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_enemyturrett1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(enigma::varaccess_attack(int(global))== 1)
    {
      draw_sprite(turrete1, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, enemy_tankt1)))-> x, enigma::glaccess(int(instance_nearest(x, y, enemy_tankt1)))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet6::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, enemyturrett1)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet6::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet6::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet6::myevent_collision_87()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,87)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet6::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_baset1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_dd(int(global))= 0;
    alarm[0]= 40;
    rad = 100;
    snore_rad = 250;
    sh = 0;
    ac = 0;
    enigma::varaccess_goahead(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baset1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    image_single =((double) direction)/ (double) 10;
    if(instance_exists(tank1))
    {
      t = tank1;
      tx = enigma::glaccess(int(tank1))-> x;
      ty = enigma::glaccess(int(tank1))-> y;
      
    }
    if(distance_to_point(tx, ty)< snore_rad)
      ac = 1;
    else ac = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baset1::myevent_boundary()
{
  if (!((x+bbox_left < 0) or (x+bbox_right > room_width) or (y+bbox_top < 0) or (y+bbox_bottom > room_height))) return 0;

  {
    
    {
      if(bbox_left < 0 && hspeed < 0)
        hspeed =- hspeed;
      if(bbox_right > room_width && hspeed > 0)
        hspeed =- hspeed;
      if(bbox_top < 0 && vspeed < 0)
        vspeed =- vspeed;
      if(bbox_bottom > room_height && vspeed > 0)
        vspeed =- vspeed;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baset1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprite_index, image_index, x, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[0]= random(30)+ 10;
    hold = instance_nearest(x, y, baset1);
    alarm[1]= 20;
    youcanshoot = 1;
    bth = 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::varaccess_ac(int(hold))== 1 and youcanshoot == 1 and enigma::varaccess_goahead(int(global))== 1)
    {
      instance_create(x, y, baddybullet7);
      
    }
    alarm[0]= 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    youcanshoot = 0;
    alarm[3]= 30;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_alarm_3()
{
  { if ((alarm[3] == -1) or (alarm[3]--)) return 0; }

  {
    youcanshoot = 1;
    alarm[1]= 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_step()
{
  enigma::propagate_locals(this);

  {
    x = enigma::glaccess(int(hold))-> x;
    y = enigma::glaccess(int(hold))-> y;
    if(instance_exists(tank1))
    {
      direction = point_direction(x, y, enigma::glaccess(int(tank1))-> x, enigma::glaccess(int(tank1))-> y);
      
    }
    if(bth < 1)
    {
      instance_create(x, y, dest);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_collision_91()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,91)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(enigma::varaccess_goahead(int(global))== 1)
    {
      instance_create(x, y, explosion);
      bth -= 1.5;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baseturrett1::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(baseturretto, ((double) direction)/ (double) 10, enigma::glaccess(int(instance_nearest(x, y, baset1)))-> x, enigma::glaccess(int(instance_nearest(x, y, baset1)))-> y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet7::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound0, 0);
  
  {
    speed = 20;
    direction = enigma::glaccess(int(instance_nearest(x, y, baseturrett1)))-> direction - random(20)+ random(20);
    image_alpha = .7;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet7::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet7::myevent_collision_68()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,68)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet7::myevent_collision_87()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,87)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  {
    argument_relative = 1;
    action_create_object(explosion, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_baddybullet7::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_activator4::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    shoot = 1;
    message = 0;
    range = 0;
    range2 = 0;
    enigma::varaccess_success(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator4::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    room_goto(title);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator4::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(tank))
      range = 1;
    if(instance_exists(tank1))
      range2 = 1;
    if(distance_to_object(tank)< 2 and range == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(distance_to_object(tank1)< 2 and range2 == 1)
    {
      if(shoot == 1)
      {
        instance_create(x, y, messenger);
        
      }
      shoot = 0;
      
    }
    if(message == 1)
    {
      instance_destroy();
      
    }
    if(instance_exists(activator3))
    {
      
    }
    else
    {
      enigma::varaccess_mssg3(int(global))= 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator4::myevent_collision_83()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,83)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}

  {
    if(message == 0 and room == level1 and enigma::varaccess_mssg4(int(global))== 1)
    {
      textbox(HQrank, 0, "Amazing!||| You , ||| a trainee , ||| single handedly repelled the Confederate driods!||| High Command is going to hear about enigmathis !||||| I ! an expert on enigmathis but I'd say your career is got a good start.");
      message = 1;
      enigma::varaccess_mssg5(int(global))= 1;
      enigma::varaccess_success(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_activator4::_SCR_textbox(variant argument0, variant argument1, variant argument2, variant argument3)
{
  var sprite, subimage, text;
  var x1, y1, x2, y2, sprite_hmargin, sprite_vmargin, text_hmargin, text_vmargin, line_height;
  var border_color1, border_color2, border_thickness, fill_color1, fill_color2, text_color, border_alpha1, border_alpha2, fill_alpha1, fill_alpha2;
  var background, continue_sprite, continue_key, escape_key, speed_factor, sound, animation_speed, open;
  var c, cx, cy, cc, i, ii, ci, n, m, img, code, w, skip, split;
  var ix1, iy1, ix2, iy2;
  var oc, oa;
  sprite = argument0;
  subimage = argument1;
  text = argument2;
  x1 = view_xport[0] + 0;
  y1 = view_yport[0] + 352;
  x2 = view_xport[0] + 416;
  y2 = view_yport[0] + 446;
  sprite_hmargin = 10;
  sprite_vmargin = 10;
  text_hmargin = 20;
  text_vmargin = 20;
  line_height = 1;
  border_color1 = c_white;
  border_color2 = c_white;
  border_thickness = 5;
  fill_color1 = c_white;
  fill_color2 = c_white;
  text_color = c_white;
  border_alpha1 = 0.6;
  border_alpha2 = 0.4;
  fill_alpha1 = 1;
  fill_alpha2 = 1;
  background = bck_textbox;
  continue_sprite = spr_continue;
  continue_key = ord("Z");
  escape_key = vk_escape;
  speed_factor = 1;
  sound = snd_type;
  animation_speed = 0.5;
  open = 0;
  oc = draw_get_color();
  oa = draw_get_alpha();
  split = 0;
  window_set_visible(1);
  screen_redraw();
  line_height *= string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  keyboard_clear(continue_key);
  if(is_string(argument3))
    open = 0;
  ix1 = x1;
  iy1 = y1;
  ix2 = x2;
  iy2 = y2;
  x1 +=(x2 - x1)/ (double) 2;
  y1 +=(y2 - y1)/ (double) 2;
  x2 = x1;
  y2 = y1;
  while(1)
  {
    if(open)
    {
      x1 = enigma_max(x1 - 4, ix1);
      x2 = enigma_min(x2 + 4, ix2);
      y1 = enigma_max(y1 - 2, iy1);
      y2 = enigma_min(y2 + 2, iy2);
      
    }
    else
    {
      x1 = ix1;
      y1 = iy1;
      x2 = ix2;
      y2 = iy2;
      
    }
    if(! background_exists(background))
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin(pr_trianglelist);
        draw_vertex_color(x1, y1, border_color1, border_alpha1);
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1, border_color1, border_alpha1);
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, merge_color(border_color1, border_color2, border_thickness / (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (border_thickness / (double)(y2 - y1)));
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x2, y2, border_color2, border_alpha2);
        draw_vertex_color(x2, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1, y2 - border_thickness, merge_color(border_color1, border_color2, ((y2 - y1)- border_thickness)/ (double)(y2 - y1)), border_alpha1 + (border_alpha2 - border_alpha1)* (((y2 - y1)- border_thickness)/ (double)(y2 - y1)));
        draw_vertex_color(x1 + border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x1 + border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_vertex_color(x2 - border_thickness, y1 + border_thickness, fill_color1, fill_alpha1);
        draw_vertex_color(x2 - border_thickness, y2 - border_thickness, fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_set_color(border_color1);
        draw_set_alpha(border_alpha1);
        draw_rectangle(x1, y1, x2, y1 + border_thickness, 0);
        draw_rectangle(x1, y1 + border_thickness, x1 + border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x2, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        draw_rectangle(x1, y2 - border_thickness, x2, y2, 0);
        draw_set_color(fill_color1);
        draw_set_alpha(fill_alpha1);
        draw_rectangle(x1 + border_thickness, y1 + border_thickness, x2 - border_thickness, y2 - border_thickness, 0);
        
      }
      
    }
    else
    {
      if(gamemaker_registered)
      {
        draw_primitive_begin_texture(pr_trianglelist, background_get_texture(background));
        draw_vertex_texture_color(x1, y1, 0, 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x1, y2, 0, texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_vertex_texture_color(x2, y1, texture_get_width(background_get_texture(background)), 0, fill_color1, fill_alpha1);
        draw_vertex_texture_color(x2, y2, texture_get_width(background_get_texture(background)), texture_get_height(background_get_texture(background)), fill_color2, fill_alpha2);
        draw_primitive_end();
        
      }
      else
      {
        draw_background_stretched(background, x1, y1, x2 - x1, y2 - y1);
        
      }
      
    }
    if(open)
    {
      screen_refresh();
      sleep(5);
      
    }
    if((y1 == iy1)&& (y2 == iy2)&& (x1 == ix1)&& (x2 == ix2))
      break;
    
  }
  draw_set_alpha(1);
  if(sprite_exists(sprite))
  {
    x1 += sprite_hmargin;
    if(subimage !=- 1)
      draw_sprite(sprite, subimage, x1, y1 + sprite_vmargin);
    else img = 0;
    x1 += sprite_get_width(sprite);
    
  }
  x1 += text_hmargin;
  y1 += text_vmargin;
  x2 -= text_hmargin;
  y2 -= text_vmargin;
  cx = x1;
  cy = y1;
  cc = text_color;
  m = 0;
  i = 1;
  skip = 0;
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if(subimage ==- 1)
      if(sprite_exists(sprite))
    {
      draw_sprite(sprite, enigma_floor(img), x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
      img += animation_speed;
      if(enigma_floor(img)>= sprite_get_number(sprite))
        img = 0;
      
    }
    c = string_char_at(text, i);
    if(c =="\\")
    {
      if((string_char_at(text, i + 1)=="\n")
        or (string_char_at(text, i + 1)=="[")or (string_char_at(text, i + 1)=="|"))
      {
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="\n")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        cy += line_height;
        cx = x1;
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      else c ="#";
      
    }
    else if(c =="[")
    {
      if(string_char_at(text, i - 1)=="\\")
      {
        c ="\\"+ c;
        
      }
      else
      {
        code ="";
        i += 1;
        c = string_char_at(text, i);
        while(c !="]")
        {
          code += c;
          i += 1;
          if(i > string_length(text))
            break;
          c = string_char_at(text, i);
          
        }
        if(c =="]")cc = execute_string("return "+ code);
        i += 1;
        if(i > string_length(text))
          break;
        enigmacontinue;
        
      }
      
    }
    else if(c =="|")
    {
      if(string_char_at(text, i - 1)!="\\")
      {
        i += 1;
        if(i > string_length(text))
          break;
        sleep(80);
        enigmacontinue;
        
      }
      
    }
    if(((string_char_at(text, i - 1)==" ")or (string_char_at(text, i - 1)=="-")
      )or ((string_char_at(text, i - 1)=="\n")&& (string_char_at(text, i - 2)!="\\"))or (i == 1))
    {
      w = 0;
      ii = i;
      n = 0;
      ci = c;
      while((ci !=" ")
        && (ci !="-"))
      {
        if(ci =="[")n = 1;
        if((ci =="\\")
          && (string_char_at(text, ii + 1)=="\n"))
        {
          ii += 1;
          if(ii > string_length(text))
            break;
          enigmacontinue;
          
        }
        if(ci =="\n")
        {
          if(string_char_at(text, ii - 1)=="\\")ci ="\\"+ ci;
          else break;
          
        }
        if((! n)&& (ci !="\\")
          )w += string_width(ci);
        if(cx + w > x2)
          break;
        ii += 1;
        if(ii > string_length(text))
          break;
        ci = string_char_at(text, ii);
        if(ci =="]")n = 0;
        
      }
      if(cx + w > x2)
      {
        if(x1 + w <= x2)
        {
          cy += line_height;
          cx = x1;
          
        }
        else text = string_copy(text, 1, ii - 1)+ "\n"+ string_copy(text, ii, string_length(text)- ii + 1);
        
      }
      
    }
    if((cy + line_height * 2 >= y2 - sprite_get_height(continue_sprite))&& (! m))
    {
      x2 -= sprite_get_width(continue_sprite);
      m = 1;
      
    }
    if(cy + line_height > y2)
    {
      split = 1;
      break;
      
    }
    if(keyboard_check(continue_key))
      skip = 1;
    if(! skip)
      if((sound_exists(sound))&& (c !=" ")
        )sound_play(sound);
    draw_set_color(cc);
    draw_text(cx, cy, c);
    cx += string_width(c);
    i += 1;
    if(i > string_length(text))
      break;
    if(! skip)
    {
      screen_refresh();
      sleep(40 * speed_factor);
      
    }
    
  }
  ii = 0;
  n = 0;
  if(! m)
    x2 -= sprite_get_width(continue_sprite);
  if(sprite_exists(sprite))
    draw_sprite(sprite, 0, x1 - text_hmargin - sprite_get_width(sprite), y1 - text_vmargin + sprite_vmargin);
  while(1)
  {
    io_handle();
    if(escape_key !=- 1)
      if(keyboard_check(escape_key))
        exit;
    if((keyboard_check(continue_key))&& (n))
      break;
    if(! keyboard_check(continue_key))
      n = 1;
    draw_sprite(continue_sprite, enigma_floor(ii), x2, y2 - sprite_get_height(continue_sprite));
    ii += 1;
    if(enigma_floor(ii)>= sprite_get_number(continue_sprite))
      ii = 0;
    screen_refresh();
    sleep(40 * speed_factor);
    
  }
  draw_set_color(oc);
  draw_set_alpha(oa);
  if(split)
    textbox(sprite, subimage, string_delete(text, 1, i - 1), "");
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
    { (variant(*)())_SCR_draw_radar, 2 },
    { (variant(*)())_SCR_script1, 0 },
    { NULL, -1 },
    { NULL, -1 },
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
