/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant _SCR_loadmap_scr()
{
  with(block_obj)
    instance_destroy();
  with(box_obj)
    instance_destroy();
  with(dude_obj)
    instance_destroy();
  with(dude2_obj)
    instance_destroy();
  with(tree_obj)
    instance_destroy();
  with(light1_obj)
    instance_destroy();
  with(light2_obj)
    instance_destroy();
  with(light3_obj)
    instance_destroy();
  with(practice_obj)
    instance_destroy();
  enigma::varaccess_name2(int(global))= get_string("Enter the  enigmamap 's file name:", "Map")+ ".tdm";
  if(file_exists(enigma::varaccess_name2(int(global))))
  {
    enigma::varaccess_file2(int(global))= file_text_open_read(enigma::varaccess_name2(int(global)));
    do
    {
      var xx, yy, object;
      xx = file_text_read_string(enigma::varaccess_file2(int(global)));
      file_text_readln(enigma::varaccess_file2(int(global)));
      yy = file_text_read_string(enigma::varaccess_file2(int(global)));
      file_text_readln(enigma::varaccess_file2(int(global)));
      object = file_text_read_string(enigma::varaccess_file2(int(global)));
      if(toString(object)=="block")instance_create(real(xx), real(yy), block_obj);
      if(toString(object)=="box")instance_create(real(xx), real(yy), box_obj);
      if(toString(object)=="dude")instance_create(real(xx), real(yy), dude_obj);
      if(toString(object)=="dude2")instance_create(real(xx), real(yy), dude2_obj);
      if(toString(object)=="tree")instance_create(real(xx), real(yy), tree_obj);
      if(toString(object)=="light1")instance_create(real(xx), real(yy), light1_obj);
      if(toString(object)=="light2")instance_create(real(xx), real(yy), light2_obj);
      if(toString(object)=="light3")instance_create(real(xx), real(yy), light3_obj);
      if(toString(object)=="prac")instance_create(real(xx), real(yy), practice_obj);
      file_text_readln(enigma::varaccess_file2(int(global)));
      if(toString(xx)=="bg0")background_index(0)= Rbg0;
      if(toString(xx)=="bg1")background_index(0)= Rbg1;
      if(toString(xx)=="bg2")background_index(0)= Rbg2;
      if(toString(xx)=="bg3")background_index(0)= Rbg3;
      if(toString(xx)=="bg4")background_index(0)= Rbg4;
      
    }
    until(file_text_eof(enigma::varaccess_file2(int(global))));
    file_text_close(enigma::varaccess_file2(int(global)));
    
  }
  else show_message("There is no file named \""+ toString(enigma::varaccess_name2(int(global)))+ ".tdm\"");
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    crte = 1;
    enigma::varaccess_bg(int(global))= 0;
    message_background(buttonbg);
    message_button(buttonspr);
    message_button_font(ariel, 12, c_white, 1);
    message_text_font(ariel, 12, c_black, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    enigma::varaccess_save(int(global))= 0;
    crte = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_bg(int(global))== 0)
      background_index(0)= Rbg0;
    if(enigma::varaccess_bg(int(global))== 1)
      background_index(0)= Rbg1;
    if(enigma::varaccess_bg(int(global))== 2)
      background_index(0)= Rbg2;
    if(enigma::varaccess_bg(int(global))== 3)
      background_index(0)= Rbg3;
    if(enigma::varaccess_bg(int(global))== 4)
      background_index(0)= Rbg4;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    if(enigma::varaccess_save(int(global))== 1)
      if(enigma::varaccess_number(int(global))!= enigma::varaccess_highnum(int(global)))
    {
      draw_text_ext_transformed(view_xview[0] + 320, view_yview[0] + 240, "Saving...", 15, 100, 2, 2, 0);
      
    }
    if(enigma::varaccess_number(int(global))== enigma::varaccess_highnum(int(global)))
      if(enigma::varaccess_save(int(global))== 1)
    {
      draw_text_ext_transformed(view_xview[0] + 320, view_yview[0] + 240, "DONE!", 15, 100, 2, 2, 0);
      if(crte == 1)
      {
        file_text_close(enigma::varaccess_file1(int(global)));
        crte = 0;
        alarm[0]= 120;
        
      }
      
    }
    draw_text_ext_transformed(view_xview[0] + 32, view_yview[0] + 32, "F2 to save\nF3 to load\nF4 to clear\nF1 for help", 15, 100, 2, 2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_keypress_38()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(enigma::varaccess_bg(int(global))< 4)
        enigma::varaccess_bg(int(global))+= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_keypress_40()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(enigma::varaccess_bg(int(global))> 0)
        enigma::varaccess_bg(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_keypress_113()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
    {
      name = get_string("Enter the name of the  enigmamap  you want to create (you do ! need to include an extension)", "Map Name")+ ".tdm";
      enigma::varaccess_file1(int(global))= file_text_open_write(name);
      enigma::varaccess_highnum(int(global))= enigma::varaccess_number(int(global));
      enigma::varaccess_number(int(global))= 1;
      enigma::varaccess_save(int(global))= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_keypress_114()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      loadmap_scr();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_save_obj::myevent_keypress_115()
{
  
  {
    with(block_obj)
      instance_destroy();
    with(box_obj)
      instance_destroy();
    with(dude_obj)
      instance_destroy();
    with(dude2_obj)
      instance_destroy();
    with(tree_obj)
      instance_destroy();
    with(light1_obj)
      instance_destroy();
    with(light2_obj)
      instance_destroy();
    with(light3_obj)
      instance_destroy();
    enigma::varaccess_number(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_block_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_block_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_block_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "block");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    object = 1;
    do
    {
      instance_create(xx1 + 16, 16, blockper_obj);
      xx1 += 32;
      
    }
    until(xx1 >= 1280);
    do
    {
      instance_create(16, yy1 + 16, blockper_obj);
      yy1 += 32;
      
    }
    until(yy1 >= 960);
    do
    {
      instance_create(xx2 + 16, 960 - 16, blockper_obj);
      xx2 += 32;
      
    }
    until(xx2 >= 1280);
    do
    {
      instance_create(1280 - 16, yy2 + 16, blockper_obj);
      yy2 += 32;
      
    }
    until(yy2 >= 960);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_beginstep()
{
  
  {
    x = mouse_x;
    y = mouse_y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_globalleftpress()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
    {
      if(object == 1)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, block_obj);
      if(object == 2)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, tree_obj);
      if(object == 3)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, box_obj);
      if(object == 4)
      {
        if(instance_exists(dude_obj))
        {
          enigma::glaccess(int(dude_obj))-> x = round(mouse_x / (double) 16)* 16;
          enigma::glaccess(int(dude_obj))-> y = round(mouse_y / (double) 16)* 16;
          
        }
        else instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, dude_obj);
        
      }
      if(object == 5)
      {
        if(instance_exists(dude2_obj))
        {
          enigma::glaccess(int(dude2_obj))-> x = round(mouse_x / (double) 16)* 16;
          enigma::glaccess(int(dude2_obj))-> y = round(mouse_y / (double) 16)* 16;
          
        }
        else instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, dude2_obj);
        
      }
      if(object == 6)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, light1_obj);
      if(object == 7)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, light2_obj);
      if(object == 8)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, light3_obj);
      if(object == 9)
        instance_create(round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16, practice_obj);
      
    }
    
  }
  
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_globalrightpress()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
    {
      if(object == 1)
        if(place_meeting(mouse_x, mouse_y, block_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, block_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 2)
        if(place_meeting(mouse_x, mouse_y, tree_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, tree_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 3)
        if(place_meeting(mouse_x, mouse_y, box_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, box_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 4)
        if(place_meeting(mouse_x, mouse_y, dude_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, dude_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 5)
        if(place_meeting(mouse_x, mouse_y, dude2_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, dude2_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 6)
        if(place_meeting(mouse_x, mouse_y, light1_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, light1_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 7)
        if(place_meeting(mouse_x, mouse_y, light2_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, light2_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 8)
        if(place_meeting(mouse_x, mouse_y, light3_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, light3_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      if(object == 9)
        if(place_meeting(mouse_x, mouse_y, practice_obj))
      {
        closest = instance_nearest(mouse_x, mouse_y, practice_obj);
        tempnum = enigma::varaccess_number(int(closest));
        with(closest)
          instance_destroy();
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_mousewheelup()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(object < 10)
        object += 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_mousewheeldown()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(object > 1)
        object -= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    if(object == 1)
      draw_sprite(blockspr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    if(object == 2)
      draw_sprite(treespr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    if(object == 3)
      draw_sprite(boxspr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    if(object == 4)
      draw_sprite(dudespr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    if(object == 5)
      draw_sprite(dude2spr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    if(object == 6)
    {
      draw_set_blend_mode(bm_add);
      draw_sprite(light1spr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
      draw_set_blend_mode(bm_normal);
      
    }
    if(object == 7)
    {
      draw_set_blend_mode(bm_add);
      draw_sprite(light2spr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
      draw_set_blend_mode(bm_normal);
      
    }
    if(object == 8)
      if(place_meeting(mouse_x, mouse_y, light3_obj))
    {
      closest = instance_nearest(mouse_x, mouse_y, light3_obj);
      tempnum = enigma::varaccess_number(int(closest));
      with(closest)
        instance_destroy();
      
    }
    if(object == 9)
      draw_sprite(pracspr, - 1, round(mouse_x / (double) 16)* 16, round(mouse_y / (double) 16)* 16);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_keypress_37()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(object > 1)
        object -= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_mouse_obj::myevent_keypress_39()
{
  
  {
    if(enigma::varaccess_save(int(global))== 0)
      if(object < 10)
        object += 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_box_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_box_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_box_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "box");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "dude");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude2_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude2_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dude2_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "dude2");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tree_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tree_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tree_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "tree");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light1_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light1_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light1_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "light1");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light1_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    draw_set_blend_mode(bm_add);
    draw_set_alpha(.5);
    draw_sprite(sprite_index, - 1, x, y);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light2_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light2_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light2_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "light2");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light2_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    draw_set_blend_mode(bm_add);
    draw_set_alpha(.5);
    draw_sprite(sprite_index, - 1, x, y);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light3_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light3_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light3_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "light3");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_light3_obj::myevent_draw()
{
  if (!(visible)) return 0;
image_index+=image_speed;

  {
    draw_set_blend_mode(bm_add);
    draw_set_alpha(.1);
    draw_sprite(sprite_index, - 1, x, y);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_practice_obj::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))+= 1;
    number = enigma::varaccess_number(int(global));
    
  }
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_practice_obj::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_number(int(global))-= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_practice_obj::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_save(int(global))== 0)
      writing = 0;
    if(enigma::varaccess_save(int(global))== 1)
      if(number == enigma::varaccess_number(int(global)))
        if(writing == 0)
    {
      writing = 1;
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(x));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), toString(y));
      file_text_writeln(enigma::varaccess_file1(int(global)));
      file_text_write_string(enigma::varaccess_file1(int(global)), "prac");
      file_text_writeln(enigma::varaccess_file1(int(global)));
      if(number == enigma::varaccess_highnum(int(global)))
      {
        if(enigma::varaccess_bg(int(global))== 0)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg0");
        if(enigma::varaccess_bg(int(global))== 1)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg1");
        if(enigma::varaccess_bg(int(global))== 2)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg2");
        if(enigma::varaccess_bg(int(global))== 3)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg3");
        if(enigma::varaccess_bg(int(global))== 4)
          file_text_write_string(enigma::varaccess_file1(int(global)), "bg4");
        file_text_writeln(enigma::varaccess_file1(int(global)));
        file_text_write_string(enigma::varaccess_file1(int(global)), "END");
        exit;
        
      }
      enigma::varaccess_number(int(global))+= 1;
      
    }
    
  }
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
    { NULL, -1 },
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
