/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant enigma::OBJ_car_down::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dead = 0;
  action_sprite_set(sprite_car_down, random(4), 0);
  
  {
    argument_relative = 0;
    action_move_to(44 + 120, - 80);
    
  }
  
  {
    argument_relative = 0;
    action_set_vspeed(6);
    
  }
  if(action_if_dice(2))
  {
    
    {
      argument_relative = 0;
      action_move_to(44 + 60, - 80);
      
    }
    
    {
      argument_relative = 0;
      action_set_vspeed(5);
      
    }
    if(action_if_dice(3))
    {
      
      {
        argument_relative = 0;
        action_move_to(44, - 80);
        
      }
      
      {
        argument_relative = 0;
        action_set_vspeed(4);
        
      }
      
    }
    
  }
  if(argument_relative = 1, action_if_object(car_down, 0, 0))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_car_down::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_down_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_down::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_down_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_down::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_down_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_down::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
if(action_if(y > room_height))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_controller::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  enigma::varaccess_petrol(int(global))= 1000;
  
  {
    argument_relative = 0;
    action_set_alarm(300, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 0;
    action_create_object(gas, 40 + random(320), - 40);
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(300 + score / (double) 100, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_step()
{
  enigma::propagate_locals(this);

  {
    argument_relative = 1;
    action_set_score(1);
    
  }
  if(action_if_dice(70 - score / (double) 200))
  {
    argument_relative = 0;
    action_create_object(car_down, 0, 0);
    
  }
  if(action_if_dice(200 - score / (double) 200))
  {
    argument_relative = 0;
    action_create_object(car_up, 0, 0);
    
  }
  if(action_if(score > 3000))
    if(action_if_dice(800 - score / (double) 30))
      if(action_if_number(police, 0, 0))
  {
    argument_relative = 0;
    action_create_object(police, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller::myevent_nomorelives()
{
  if (!(lives <= 0)) return 0;
action_highscore_show(background0, 1, 0x0000FF, 0x00FFFF, "Times New Roman", 12, 0, 1, 0, 0, 0);
  game_restart();
  
  return 0;
}

variant enigma::OBJ_controller::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
action_font(font_small, 0);
  action_color(0xFFFFFF);
  
  {
    argument_relative = 0;
    action_draw_text("Score: "+ toString(score), 420, 20);
    
  }
  
  {
    argument_relative = 0;
    action_draw_text("Cars left: "+ toString(lives), 420, 50);
    
  }
  
  {
    argument_relative = 0;
    action_draw_text("Petrol", 420, 100);
    
  }
  action_color(0x000000);
  
  {
    argument_relative = 0;
    action_draw_rectangle(480, 100, 480 + 100, 120, 0);
    
  }
  action_color(0x0000FF);
  if(action_if(enigma::varaccess_petrol(int(global))> 300))
    action_color(0x00FFFF);
  if(action_if(enigma::varaccess_petrol(int(global))> 700))
    action_color(0x00FF00);
  
  {
    argument_relative = 0;
    action_draw_rectangle(480, 100, 480 + max(varargs(), 0, min(100, enigma::varaccess_petrol(int(global))/ (double) 10)), 120, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_up::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dead = 0;
  action_sprite_set(sprite_car_up, random(4), 0);
  
  {
    argument_relative = 0;
    action_move_to(44 + 300, - 80);
    
  }
  
  {
    argument_relative = 0;
    action_set_vspeed(2);
    
  }
  if(action_if_dice(2))
  {
    
    {
      argument_relative = 0;
      action_move_to(44 + 240, - 80);
      
    }
    
    {
      argument_relative = 0;
      action_set_vspeed(1);
      
    }
    if(action_if_dice(3))
    {
      
      {
        argument_relative = 0;
        action_move_to(44 + 180, - 80);
        
      }
      
      {
        argument_relative = 0;
        action_set_vspeed(0.5);
        
      }
      
    }
    
  }
  if(argument_relative = 1, action_if_object(car_up, 0, 0))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_car_up::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_up_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_up::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_up_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_up::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_car_up_dead, - 1, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_up::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
if(action_if(y > room_height))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dead = 0;
  
  {
    argument_relative = 0;
    action_set_vspeed(0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if(dead))
    exit;
  if(action_if(enigma::varaccess_petrol(int(global))<= 0))
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  enigma::varaccess_petrol(int(global))+=- 1;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_racing_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_collision_4()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,4)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(gas_sound, 0);
  enigma::varaccess_petrol(int(global))= min(1000, enigma::varaccess_petrol(int(global))+ 400);
  with(other)
  {
    action_kill_object();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_racing_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_sound(collision, 0);
  action_sprite_set(sprite_racing_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_keyboard_40()
{
  if(action_if(enigma::varaccess_petrol(int(global))> 0 && not dead))
  {
    argument_relative = 1;
    action_move_to(0, 3);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_keyboard_39()
{
  if(action_if(enigma::varaccess_petrol(int(global))> 0 && x < 360 && not dead))
  {
    argument_relative = 1;
    action_move_to(2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_keyboard_38()
{
  if(action_if(enigma::varaccess_petrol(int(global))> 0 && not dead))
  {
    argument_relative = 1;
    action_move_to(0, - 3);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_keyboard_37()
{
  if(action_if(enigma::varaccess_petrol(int(global))> 0 && x > 32 && not dead))
  {
    argument_relative = 1;
    action_move_to(- 2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_keyboard_32()
{
  if(action_if_sound(horn))
    exit;
  action_sound(horn, 0);
  
  return 0;
}

variant enigma::OBJ_car_racing::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_end_sound(sirens);
  action_sleep(1000, 1);
  
  {
    argument_relative = 1;
    action_set_life(- 1);
    
  }
  action_current_room(0);
  
  return 0;
}

variant enigma::OBJ_gas::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_vspeed(background_vspeed(0) );
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gas::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
if(action_if(y > room_height))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_police::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sirens, 1);
  dead = 0;
  
  {
    argument_relative = 0;
    action_set_vspeed(- 1.5);
    
  }
  
  {
    argument_relative = 0;
    action_move_to(enigma::glaccess(int(car_racing))-> x, room_height);
    
  }
  if(argument_relative = 1, action_if_object(car_racing, 0, 0))
    action_kill_object();
  if(argument_relative = 1, action_if_object(car_down, 0, 0))
    action_kill_object();
  if(argument_relative = 1, action_if_object(car_up, 0, 0))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_police::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_end_sound(sirens);
  
  return 0;
}

variant enigma::OBJ_police::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if(dead))
    exit;
  if(action_if(enigma::glaccess(int(car_racing))-> x < x && place_empty(x - 8, y)))
  {
    argument_relative = 1;
    action_move_to(- 2, 0);
    
  }
  if(action_if(enigma::glaccess(int(car_racing))-> x > x && place_empty(x + 8, y)))
  {
    argument_relative = 1;
    action_move_to(2, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_police::myevent_collision_5()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,5)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_end_sound(sirens);
  action_sound(collision, 0);
  action_sprite_set(sprite_police_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_police::myevent_collision_3()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,3)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_end_sound(sirens);
  action_sound(collision, 0);
  action_sprite_set(sprite_police_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_police::myevent_collision_2()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,2)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_end_sound(sirens);
  action_sound(collision, 0);
  action_sprite_set(sprite_police_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_police::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
if(action_if(dead))
    exit;
  action_end_sound(sirens);
  action_sound(collision, 0);
  action_sprite_set(sprite_police_dead, 0, 1);
  
  {
    argument_relative = 0;
    action_set_vspeed(3);
    
  }
  dead = 1;
  
  return 0;
}

variant enigma::OBJ_police::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
if(action_if(y < 0 || y > room_height + 20))
    action_kill_object();
  
  return 0;
}

variant enigma::OBJ_controller_start::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_dice(50))
  {
    argument_relative = 0;
    action_create_object(car_down, 0, 0);
    
  }
  if(action_if_dice(100))
  {
    argument_relative = 0;
    action_create_object(car_up, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_controller_start::myevent_keyboard_1()
{
  action_next_room(0);
  
  return 0;
}

variant enigma::OBJ_controller_start::myevent_gamestart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(background_music, 1);
  
  {
    argument_relative = 0;
    action_set_score(0);
    
  }
  
  {
    argument_relative = 0;
    action_set_life(3);
    
  }
  action_set_caption(0, "score: ", 0, "lives: ", 0, "health: ");
  
  return 0;
}

variant enigma::OBJ_controller_start::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
action_font(font_large, 1);
  action_color(0x0000FF);
  
  {
    argument_relative = 0;
    action_draw_text("Street Racing", 200, 40);
    
  }
  action_font(font_small, 1);
  action_color(0x00FFFF);
  
  {
    argument_relative = 0;
    action_draw_text("press any key to start", 200, 100);
    
  }
  
  {
    argument_relative = 0;
    action_draw_text("press escape to quit", 200, 130);
    
  }
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
