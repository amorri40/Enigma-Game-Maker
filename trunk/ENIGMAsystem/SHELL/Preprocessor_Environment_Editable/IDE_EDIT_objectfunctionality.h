/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant enigma::OBJ_object0::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.007;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object0::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  action_sound(sound0, 0);
  
  return 0;
}

variant enigma::OBJ_object0::myevent_keypress_46()
{
  game_restart();
  
  return 0;
}

variant enigma::OBJ_object1::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.007;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object1::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object7::myevent_step()
{
  enigma::propagate_locals(this);
image_alpha +=- 0.005;
  
  return 0;
}

variant enigma::OBJ_object7::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 1;
  
  return 0;
}

variant enigma::OBJ_object8::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_vspeed(1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object8::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_dice(2))
  {
    
    {
      argument_relative = 0;
      action_set_hspeed(- 1);
      
    }
    
  }
  if(action_if_dice(2))
  {
    
    {
      argument_relative = 0;
      action_set_hspeed(+ 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object8::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_object9::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_dice(2))
  {
    
    {
      argument_relative = 1;
      action_create_object(object8, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object9::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_move_point(enigma::glaccess(int(object13))-> x, enigma::glaccess(int(object13))-> y, 4);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object13::myevent_collision_9()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,9)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  action_next_room(0);
  
  return 0;
}

variant enigma::OBJ_object14::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_dice(2))
  {
    
    {
      argument_relative = 1;
      action_create_object(object8, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object14::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_object14::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_move_point(enigma::glaccess(int(object15))-> x, enigma::glaccess(int(object15))-> y, 4);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object15::myevent_collision_14()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,14)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {x=xprevious; y=yprevious;}
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_nexroomdelay10::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_nexroomdelay10::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(300, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_room3::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(sound1, 1);
  
  return 0;
}

variant enigma::OBJ_object20::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object20::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object21::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object21::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object22::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object22::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object23::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object23::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object24::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object24::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object25::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object25::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_delay30::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_delay30::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(780, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object27::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object27::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object28::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object28::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object29::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object29::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  
  return 0;
}

variant enigma::OBJ_object30::myevent_step()
{
  enigma::propagate_locals(this);
if(! action_if_variable(image_alpha, 0.6, 2))
  {
    image_alpha +=+ 0.01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object30::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  action_end_sound(sound1);
  action_sound(sound2, 0);
  
  return 0;
}

variant enigma::OBJ_object32::myevent_step()
{
  enigma::propagate_locals(this);
energy +=+ 1;
  if(action_if_variable(image_alpha, 1, 2))
  {
    action_end_game();
    
  }
  if(action_if_variable(energy, 940, 2))
  {
    image_alpha +=+ 0.004;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object32::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  image_alpha = 0;
  energy = 0;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
