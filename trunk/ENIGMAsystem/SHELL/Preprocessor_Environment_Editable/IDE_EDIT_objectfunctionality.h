/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant _SCR_timeing0()
{
  with(self)
  {
    enigma::varaccess_deltaTime(int(self))= enigma::varaccess_current_time(int(self))- enigma::varaccess_startingTime(int(self));
    if(enigma::varaccess_minutes(int(self))< 9)
      enigma::varaccess_minutes(int(self))= enigma::varaccess_deltaTime(int(self))/ (double) 60000;
    if(enigma::varaccess_minutes(int(self))< 9)
      enigma::varaccess_seconds(int(self))=(enigma::varaccess_deltaTime(int(self))mod 60000)/ (double) 1000;
    if(enigma::varaccess_minutes(int(self))== 9 && enigma::varaccess_seconds(int(self))< 59)
      enigma::varaccess_seconds(int(self))=(enigma::varaccess_deltaTime(int(self))mod 60000)/ (double) 1000;
    if(enigma::varaccess_minutes(int(self))< 9)
      enigma::varaccess_hundreds(int(self))=(enigma::varaccess_deltaTime(int(self))mod 1000)/ (double) 10;
    if(enigma::varaccess_minutes(int(self))== 9 && enigma::varaccess_seconds(int(self))< 60 && enigma::varaccess_hundreds(int(self))< 99)
      enigma::varaccess_hundreds(int(self))=(enigma::varaccess_deltaTime(int(self))mod 1000)/ (double) 10;
    if(enigma::varaccess_seconds(int(self))< 10)
      enigma::varaccess_second0pad(int(self))="0";
    else enigma::varaccess_second0pad(int(self))="";
    if(enigma::varaccess_hundreds(int(self))< 10)
      enigma::varaccess_hundred0pad(int(self))="0";
    else enigma::varaccess_hundred0pad(int(self))="";
    draw_text_color(view_xview[0] + 92, view_yview[0], toString(enigma::varaccess_minutes(int(self)))+ "'"+ enigma::varaccess_second0pad(int(self))+ toString(enigma::varaccess_seconds(int(self)))+ "'"+ enigma::varaccess_hundred0pad(int(self))+ toString(enigma::varaccess_hundreds(int(self))), c_white, c_white, c_white, c_white, 1);
    draw_sprite(54, 0, view_xview[0] + 74, view_yview[0] + 3);
    
  }
  ;
  
  return 0;
}

variant _SCR_Data_Write_1()
{
  with(self)
  {
    enigma::varaccess_gamevars(int(self))= file_text_open_write("S&K2_data");
    file_text_write_string(enigma::varaccess_gamevars(int(self)), "Save Data Loaded");
    file_text_writeln(enigma::varaccess_gamevars(int(self)));
    file_text_write_real(enigma::varaccess_gamevars(int(self)), lives);
    file_text_writeln(enigma::varaccess_gamevars(int(self)));
    file_text_write_real(enigma::varaccess_gamevars(int(self)), enigma::varaccess_zone(int(self)));
    
  }
  ;
  
  return 0;
}

variant _SCR_Data_Read_2()
{
  with(self)
  {
    enigma::varaccess_gamevars(int(self))= file_text_open_read("S&K2_data");
    enigma::varaccess_enigmawrite(int(self))= file_text_read_real(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ2e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ3e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    
  }
  ;
  
  return 0;
}

variant _SCR_Data_Close_3()
{
  with(self)
  {
    file_text_close(enigma::varaccess_gamevars(int(self)));
    file_text_close(all);
    
  }
  ;
  
  return 0;
}

variant _SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  with(self)
  {
    enigma::glaccess(int(self))-> x = view_xview[0] + 120;
    enigma::glaccess(int(self))-> y = view_yview[0] + 80;
    draw_set_color(c_black);
    draw_sprite_ext(sprBlock, 0, enigma::glaccess(int(self))-> x - 120, enigma::glaccess(int(self))-> y - 80, 2, 2, 0, c_black, 1 - (enigma::varaccess_nx(int(self))/ (double) 240));
    draw_set_color(c_red);
    draw_rectangle(enigma::glaccess(int(self))-> x - 72, enigma::glaccess(int(self))-> y - 80 - enigma::varaccess_nx(int(self)), enigma::glaccess(int(self))-> x - 23, enigma::glaccess(int(self))-> y + 35 - enigma::varaccess_nx(int(self)), 0);
    draw_sprite(sprCredit, 1, enigma::glaccess(int(self))-> x - 48, enigma::glaccess(int(self))-> y + 13 - enigma::varaccess_nx(int(self)));
    enigma::varaccess_col(int(self))= make_color_rgb(32, 36, 32);
    draw_set_color(enigma::varaccess_col(int(self)));
    draw_rectangle(enigma::glaccess(int(self))-> x - 80 + enigma::varaccess_nx(int(self)), enigma::glaccess(int(self))-> y - 16, enigma::glaccess(int(self))-> x + 90 + enigma::varaccess_nx(int(self)), enigma::glaccess(int(self))-> y, 0);
    draw_set_color(c_white);
    enigma::varaccess_font(int(self))= font_add_sprite(alphabet3, 57, 1, 2);
    draw_set_font(enigma::varaccess_font(int(self)));
    draw_set_halign(enigma::varaccess_fa_center(int(self)));
    draw_set_valign(enigma::varaccess_fa_middle(int(self)));
    enigmadraw_text(enigma::glaccess(int(self))-> x + enigma::varaccess_nx(int(self)), enigma::glaccess(int(self))-> y, argument0);
    draw_sprite(67, enigma::varaccess_act(int(global)), enigma::glaccess(int(self))-> x + 8 + enigma::varaccess_nx(int(self)), enigma::glaccess(int(self))-> y);
    
  }
  ;
  
  return 0;
}

variant _SCR_opening_5(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  with(self)
  {
    enigma::varaccess_gamevars(int(self))= file_text_open_read("SA3_Text");
    enigma::varaccess_enigmawrite(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ2e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ3e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ4e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ5e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ6e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    file_text_readln(enigma::varaccess_gamevars(int(self)));
    enigma::varaccess_writ7e(int(self))= file_text_read_string(enigma::varaccess_gamevars(int(self)));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
  }
  
  {
    instance_create(x - 16, y + 16, AngleLeft);
    instance_create(x + 16, y + 16, AngleRight);
    r =- 1;
    image_speed = 0.5;
    score = 0;
    enigma::varaccess_bonus(int(global))= 0;
    inair = 0;
    view_object[0]= object_index;
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(90, 6);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_alarm_6()
{
  { if ((alarm[6] == -1) or (alarm[6]--)) return 0; }

  {
    if(enigma::varaccess_bonus(int(global))== 0)
    {
      slep = 1;
      image_index = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_variable(enigmawait, 0, 0))
  {
    
    {
      if(instance_exists(AngleRight))
      {
        radians = degtorad(angle);
        if(grinding == 1 && sp > 0)
        {
          if(keyboard_check(vk_right)&& sp < 10)
            sp += 0.2;
          
        }
        if(grinding == 1 && sp < 0)
        {
          if(keyboard_check(vk_left)&& sp > - 10)
            sp -= 0.2;
          
        }
        if(grinding == 0)
        {
          if(keyboard_check(vk_right)&& sp < 10 && bonus == 0)
            sp += 0.2;
          if(keyboard_check(vk_left)&& sp > - 10 && bonus == 0)
            sp -= 0.2;
          
        }
        if(! keyboard_check(vk_right)&& sp > 0 && grinding == 0 && bonus == 0)
          sp -= 0.2;
        if(! keyboard_check(vk_left)&& sp < 0 && grinding == 0 && bonus == 0)
          sp += 0.2;
        if(grinding == 0)
        {
          if(keyboard_check(vk_right)&& sp < 2 && bonus == 1)
            sp += 0.2;
          
        }
        if(! keyboard_check(vk_right)&& sp > 1 && grinding == 0 && enigma::varaccess_bonus(int(global))== 1)
          sp -= 0.2;
        if(enigma::varaccess_bonus(int(global))== 1 && sp < 1)
          sp = 1;
        if(abs(sp)< 0.2)
          sp = 0;
        if(sp != 0)
        {
          for(i = 0; i < abs(sp); i += 1)
          {
            if(sp <= 0)
              break;
            x += cos((double)(radians));
            y -= sin((double)(radians));
            
          }
          for(i = 0; i < abs(sp); i += 1)
          {
            if(sp >= 0)
              break;
            x -= cos((double)(radians));
            y += sin((double)(radians));
            
          }
          
        }
        if(place_free(x, y))
        {
          for(i = 0; i < 20; i += 1)
          {
            if(! place_free(x, y))
              break;
            x += sin((double)(radians));
            y += cos((double)(radians));
            
          }
          
        }
        if(! place_free(x, y))
        {
          for(i = 0; i < 20; i += 1)
          {
            if(place_free(x, y))
              break;
            x -= sin((double)(radians));
            y -= cos((double)(radians));
            
          }
          
        }
        
      }
      
    }
    if(action_if_number(AngleRight, 0, 2))
    {
      radians = degtorad(angle);
      if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
            break;
          tempA1 += 1;
          enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          
        }
        
      }
      if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
            break;
          tempA1 -= 1;
          enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          
        }
        
      }
      if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
            break;
          tempA2 += 1;
          enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          
        }
        
      }
      if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
            break;
          tempA2 -= 1;
          enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          
        }
        
      }
      
    }
    
    {
      if(abs(sp)> 0)
        angle = point_direction(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y, enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y);
      
    }
    
  }
  
  {
    slep = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_endstep()
{
  
  {
    spd = sqrt(sqr(x - xprevious)+ sqr(y - yprevious));
    hspd = x - xprevious;
    vspd = y - yprevious;
    if(r ==- 1 && sp < 0)
      skid = 1;
    else
    {
      if(r == 1 && sp > 0)
        skid = 1;
      else skid = 0;
      
    }
    if(abs(spd)> .01 && abs(spd)< 3.01)
      walk = 1;
    else walk = 0;
    if(abs(spd)> 3.01 && abs(spd)< 6.01)
      jog = 1;
    else jog = 0;
    if(abs(spd)> 6.01 && abs(spd)< 9.01)
      run = 1;
    else run = 0;
    if(abs(spd)> 9.01)
      fast = 1;
    else fast = 0;
    if(abs(spd)< .01)
      stp = 1;
    else stp = 0;
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 0)
    {
      if(r ==- 1)
      {
        if(vspd < 0)
          sp -= .45;
        else sp += .45;
        
      }
      else
      {
        if(vspd < 0)
          sp += .45;
        else sp -= .45;
        
      }
      
    }
    if(place_free(x, y + 2)&& abs(sp)< .3 && grinding == 0)
    {
      gravity = .75;
      sp = 0;
      with(AngleLeft)
      {
        alarm[7]= 1;
        
      }
      with(AngleRight)
      {
        alarm[7]= 1;
        
      }
      gravity = .75;
      angle = 0;
      
    }
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 1)
    {
      if(r ==- 1)
      {
        if(vspd < - .5)
          sp -= .45;
        if(vspd > - .5 && vspd < .5)
        {
          r = 1;
          sp += .45;
          
        }
        if(vspd >= .5)
          sp += .45;
        
      }
      else
      {
        if(vspd < - .5)
          sp += .45;
        if(vspd > - .5 && vspd < .5)
        {
          r =- 1;
          sp -= .45;
          
        }
        if(vspd >= .5)
          sp -= .45;
        
      }
      
    }
    if(on == 6)
      on = 0;
    else on += 1;
    
  }
  
  {
    
  }
  
  {
    if(! place_meeting(x + 17 * (cos((double)(radians - pi / (double) 2))), y - 17 * (sin((double)(radians - pi / (double) 2))), Block))
    {
      with(AngleLeft)
      {
        alarm[7]= 1;
        
      }
      with(AngleRight)
      {
        alarm[7]= 1;
        
      }
      hspeed = hspd;
      vspeed = vspd;
      angle = 0;
      gravity = .5;
      inair = 1;
      sp = 0;
      
    }
    else inair = 0;
    
  }
  
  {
    if(! instance_exists(AngleRight))
      sp = hspd * (5 / (double) 6);
    if((abs(sp)> 10 || abs(speed)> 10)&& (on == 0 || on == 4))
      instance_create(x, y, afterimage);
    if(enigma::varaccess_bonus(int(global))== 1 && (on == 0 || on == 4))
      instance_create(x, y, afterimage);
    
  }
  
  {
    
  }
  
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,0)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,0)) { y=yprevious;}}
if(action_if_variable(enigma::glaccess(int(other))-> solid, 1, 0))
  {
    y -= 16;
    radians = degtorad(angle);
    move_contact_solid(270, - 1);
    speed = 0;
    g = 0;
    jmp = 0;
    gravity = 0;
    instance_create(x - 16, y, AngleLeft);
    instance_create(x + 16, y, AngleRight);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_collision_11()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,11)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,11)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,11)) { y=yprevious;}}

  {
    if(enigma::glaccess(int(other))-> solid == 0)
      exit;
    else
    {
      y -= 16;
      radians = degtorad(angle);
      move_contact_solid(270, - 1);
      speed = 0;
      g = 0;
      jmp = 0;
      gravity = 0;
      instance_create(x - 16, y, AngleLeft);
      instance_create(x + 16, y, AngleRight);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_collision_17()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,17)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,17)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,17)) { y=yprevious;}}

  {
    y -= 16;
    radians = degtorad(angle);
    move_contact_solid(270, - 1);
    speed = 0;
    g = 0;
    jmp = 0;
    gravity = 0;
    instance_create(x - 16, y, AngleLeft);
    instance_create(x + 16, y, AngleRight);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_collision_56()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,56)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,56)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,56)) { y=yprevious;}}
with(other)
  {
    action_kill_object();
    
  }
  
  {
    enigma::varaccess_rings(int(global))+= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_collision_57()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,57)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,57)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,57)) { y=yprevious;}}

  {
    argument_relative = 1;
    action_create_object(badsonic, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

variant enigma::OBJ_Player::myevent_keyboard_1()
{
  
  {
    slep = 0;
    alarm[6]= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_keyboard_37()
{
  
  {
    if(enigmawait == 0)
    {
      if(grinding == 0)
        r = 1;
      if(! instance_exists(AngleRight)&& bonus == 0)
      {
        if(hspeed > - 12)
          hspeed -= .5;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_keyboard_39()
{
  
  {
    if(enigmawait == 0)
    {
      if(grinding == 0)
        r =- 1;
      if(! instance_exists(AngleRight)&& bonus == 0)
      {
        if(hspeed < 12)
          hspeed += .2;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_globalleftbutton()
{
  
  {
    enigma::varaccess_rings(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_globalrightbutton()
{
  
  {
    enigma::varaccess_rings(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  if(action_if_variable(enigma::varaccess_s(int(global)), 0, 0))
  {
    action_kill_object();
    
    {
      argument_relative = 1;
      action_create_object(knuckles, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(jmp == 0 && dash == 0 && grinding == 0 && skid == 0 && slep == 0 && cr == 0 && enigma::varaccess_bonus(int(global))== 0)
    {
      if(walk == 1 && psh == 0)
        draw_sprite_ext(11, - 1, x, y, r, 1, angle, c_white, 1);
      if(jog == 1)
        draw_sprite_ext(12, - 1, x, y, r, 1, angle, c_white, 1);
      if(run == 1)
        draw_sprite_ext(13, - 1, x, y, r, 1, angle, c_white, 1);
      if(fast == 1)
        draw_sprite_ext(14, - 1, x, y, r, 1, angle, c_white, 1);
      if(stp == 1 && psh == 0)
        draw_sprite_ext(10, - 1, x, y + 1, r, 1, angle, c_white, 1);
      if(psh == 1)
        draw_sprite_ext(109, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(enigma::varaccess_bonus(int(global))== 1 && jmp == 0)
      draw_sprite_ext(14, - 1, x, y, - 1, 1, angle, c_white, 1);
    if(skid == 1 && jmp == 0 && grinding == 0 && bonus == 0)
      draw_sprite_ext(17, - 1, x, y, r, 1, angle, c_white, 1);
    if(jmp > 0 && dash == 0 && grinding == 0)
    {
      draw_sprite_ext(16, - 1, x, y, r, 1, 0, c_white, 1);
      
    }
    if(slep == 1 && grinding == 0 && bonus == 0)
    {
      draw_sprite_ext(34, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(grinding == 1)
    {
      if(sp > 0)
        r =- 1;
      else r = 1;
      draw_sprite_ext(18, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(wateron == 1)
      draw_sprite_ext(113, - 1, x, y, r, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_keypress_90()
{
  
  {
    vspeed =- 8;
    gravity = 0;
    show_message("vspeed:"+ toString(vspeed));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Player::myevent_keyrelease_90()
{
  
  {
    if(vspeed < - 1)
      vspeed =- 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_AngleLeft::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_AngleRight::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_afterimage::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_alpha = .75;
    image_index = enigma::glaccess(int(Player))-> image_index;
    angle = enigma::varaccess_angle(int(Player));
    image_speed = 0;
    alarm[0]= 2;
    walk = enigma::varaccess_walk(int(Player));
    jog = enigma::varaccess_jog(int(Player));
    run = enigma::varaccess_run(int(Player));
    fast = enigma::varaccess_fast(int(Player));
    skid = enigma::varaccess_skid(int(Player));
    jmp = enigma::varaccess_jmp(int(Player));
    slep = enigma::varaccess_slep(int(Player));
    grinding = enigma::varaccess_grinding(int(Player));
    bonus = enigma::varaccess_bonus(int(global));
    r = enigma::varaccess_r(int(Player));
    col = make_color_rgb(127, 127, 127);
    if(enigma::varaccess_bonus(int(city))!= 0)
      hspeed = enigma::varaccess_bonus(int(city));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_afterimage::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(image_alpha > 0)
    {
      image_alpha +=- .25;
      alarm[0]= 2;
      
    }
    else instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_afterimage::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(jmp == 0 && dash == 0 && grinding == 0 && skid == 0 && slep == 0 && cr == 0 && bonus == 0)
    {
      if(walk == 1)
        draw_sprite_ext(11, - 1, x, y, r, 1, angle, col, image_alpha);
      if(jog == 1)
        draw_sprite_ext(12, - 1, x, y, r, 1, angle, col, image_alpha);
      if(run == 1)
        draw_sprite_ext(13, - 1, x, y, r, 1, angle, col, image_alpha);
      if(fast == 1)
        draw_sprite_ext(14, - 1, x, y, r, 1, angle, col, image_alpha);
      if(stp == 1 && psh == 0)
        draw_sprite_ext(10, - 1, x, y + 1, r, 1, angle, col, image_alpha);
      if(psh == 1)
        draw_sprite_ext(5, - 1, x, y, r, 1, angle, col, image_alpha);
      
    }
    if(bonus == 1 && jmp == 0)
      draw_sprite_ext(14, - 1, x, y, - 1, 1, angle, col, image_alpha);
    if(skid == 1 && jmp == 0 && grinding == 0 && bonus == 0)
      draw_sprite_ext(17, - 1, x, y, r, 1, angle, col, image_alpha);
    if(jmp == 1 && dash == 0 && grinding == 0)
      draw_sprite_ext(16, - 1, x, y, r, 1, 0, col, image_alpha);
    if(slep == 1 && grinding == 0 && bonus == 0)
      draw_sprite_ext(34, - 1, x, y, r, 1, angle, col, image_alpha);
    if(grinding == 1 && bonus == 0)
      draw_sprite_ext(18, - 1, x, y, r, 1, angle, col, image_alpha);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spark::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_vspeed(- 2);
    
  }
  
  {
    argument_relative = 0;
    action_set_gravity(270, .75);
    
  }
  if(action_if_dice(2))
  {
    argument_relative = 0;
    action_move_to(x + enigmarandom(8), y + enigmarandom(8));
    
  }
  else
  {
    argument_relative = 0;
    action_move_to(x - enigmarandom(8), y - enigmarandom(8));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spark::myevent_step()
{
  enigma::propagate_locals(this);
action_sprite_transform(1, 1, + 24, 0);
  
  return 0;
}

variant enigma::OBJ_spark::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_dust::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .5;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_dust::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_loopleft::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    if(enigma::glaccess(int(Player))-> y > y && enigma::varaccess_hspd(int(Player))<= 0 || enigma::varaccess_vspd(int(Player))>= 0)
      solid = 1;
    else solid = 0;
    if(enigma::glaccess(int(Player))-> y < y)
      solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopleft::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_n(int(global))== 0)
    {
      enigma::varaccess_n(int(global))= 1;
      solid = 0;
      
    }
    if(enigma::varaccess_sp(int(Player))<= .1 && enigma::varaccess_n(int(global))== 0)
    {
      enigma::varaccess_n(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 0 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 1 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
      enigma::varaccess_n(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopright::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    if(enigma::glaccess(int(Player))-> y > y && enigma::varaccess_hspd(int(Player))>= 0 || enigma::varaccess_vspd(int(Player))>= 0)
      solid = 1;
    else solid = 0;
    if(enigma::glaccess(int(Player))-> y < y)
      solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopright::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_sp(int(Player))<=- .1 && enigma::varaccess_n(int(global))== 0)
    {
      enigma::varaccess_n(int(global))= 1;
      solid = 0;
      
    }
    if(enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_n(int(global))== 0)
    {
      enigma::varaccess_n(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 0 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 1 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
      enigma::varaccess_n(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_looptop::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopbottom::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopbottom::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    if(enigma::glaccess(int(Player))-> x > x && image_index == 0 && enigma::glaccess(int(Player))-> y > y && enigma::varaccess_sp(int(Player))<= 0 && n == 0)
    {
      n = 1;
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x && image_index == 1 && enigma::glaccess(int(Player))-> y > y && enigma::varaccess_sp(int(Player))>= 0 && n == 0)
    {
      n = 1;
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x && enigma::glaccess(int(Player))-> y < y && image_index == 1 && enigma::varaccess_sp(int(Player))<= 0 || enigma::varaccess_hspd(int(Player))> 0)
    {
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x > x && enigma::glaccess(int(Player))-> y < y && image_index == 0 && enigma::varaccess_sp(int(Player))>= 0 || enigma::varaccess_hspd(int(Player))< 0)
    {
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
      n = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_loopbottom::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::varaccess_sp(int(Player))<=- .1 && n == 0)
    {
      n = 1;
      image_index = 1;
      
    }
    if(enigma::varaccess_sp(int(Player))>= .1 && n == 0)
    {
      n = 1;
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> y < y - 16 && image_index == 1 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> y < y - 16 && image_index == 0 && enigma::varaccess_sp(int(Player))>= .1)
    {
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
    {
      n = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_flatrail::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    if(abs(enigma::varaccess_hspd(int(Player)))< 2 || abs(enigma::varaccess_vspd(int(Player)))> .5)
      solid = 0;
    else solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_flatrail::myevent_endstep()
{
  
  {
    if(abs(enigma::varaccess_hspd(int(Player)))< abs(enigma::varaccess_vspd(int(Player))))
      solid = 0;
    else solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_downrail::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(abs(enigma::varaccess_hspd(int(Player)))< 1)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_goleft::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> x < x - 15)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object32::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> y < y + 2)
      tile_layer_depth(- 10000, 10000);
    else tile_layer_depth(10000, - 10000);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_city::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sound_loop(1);
    bw = 256;
    orgn = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    bonus = 0;
    vy = view_yview[0];
    bh = 512;
    orgny = 0;
    vyp = 0;
    vcy = vy - vyp;
    mxy = room_height - 512;
    mxvc = room_height - 160;
    ydiff = mxvc / (double) mxy;
    mx2y = room_height - 240;
    mx2vc = room_height - 160;
    y2diff = mx2vc / (double) mx2y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_city::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    vxp = vx;
    vx = view_xview[0];
    vc =(vx - vxp)+ bonus;
    if(orgn < view_xview[0] - (bw * 2)|| orgn > view_xview[0] )
      orgn = view_xview[0] - bw;
    else orgn += vc / (double) 4;
    
  }
  
  {
    vyp = vy;
    vy = view_yview[0];
    vcy = vy - vyp;
    orgny += vcy / (double) ydiff;
    orgn2y += vcy / (double) y2diff;
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(cityscape, view_xview[0], orgn2y, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(buildings, orgn, orgny, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(buildings, orgn + 256, orgny, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(buildings, orgn + 512, orgny, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(buildings, orgn + 768, orgny, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gotop::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> y < y - 14)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_train::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sprite_transform(1.4, 1, 0, 0);
  
  return 0;
}

variant enigma::OBJ_train::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> x > x && hspeed < 13)
      hspeed += .5;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_hud::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    startingTime = current_time;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_hud::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    startingTime = current_time;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_hud::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    fs = font_add_sprite(49, ord("0"), 0, 0);
    draw_sprite(50, 0, view_xview[0], view_yview[0] );
    image_speed =(enigma::varaccess_hspd(int(Player))- enigma::varaccess_bonus(int(city)))/ (double) 8;
    draw_sprite(51, - 1, view_xview[0] + 10, view_yview[0] + 8);
    draw_set_font(fs);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_color(view_xview[0] + 32, view_yview[0] + 14, score, c_white, c_white, c_white, c_white, 1);
    if(enigma::varaccess_bonus(int(global))== 0)
    {
      draw_sprite(52, 0, view_xview[0] + 6, view_yview[0] + 141);
      draw_text_color(view_xview[0] + 24, view_yview[0] + 139, lives, c_white, c_white, c_white, c_white, 1);
      
    }
    draw_text_color(view_xview[0] + 32, view_yview[0], enigma::varaccess_rings(int(global)), c_white, c_white, c_white, c_white, 1);
    timeing0();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_hud::_SCR_timeing0()
{
  deltaTime = current_time - startingTime;
  if(minutes < 9)
    minutes = deltaTime / (double) 60000;
  if(minutes < 9)
    seconds =(deltaTime mod 60000)/ (double) 1000;
  if(minutes == 9 && seconds < 59)
    seconds =(deltaTime mod 60000)/ (double) 1000;
  if(minutes < 9)
    hundreds =(deltaTime mod 1000)/ (double) 10;
  if(minutes == 9 && seconds < 60 && hundreds < 99)
    hundreds =(deltaTime mod 1000)/ (double) 10;
  if(seconds < 10)
    second0pad ="0";
  else second0pad ="";
  if(hundreds < 10)
    hundred0pad ="0";
  else hundred0pad ="";
  draw_text_color(view_xview[0] + 92, view_yview[0], toString(minutes)+ "'"+ second0pad + toString(seconds)+ "'"+ hundred0pad + toString(hundreds), c_white, c_white, c_white, c_white, 1);
  draw_sprite(54, 0, view_xview[0] + 74, view_yview[0] + 3);
  
  return 0;
}

variant enigma::OBJ_object38::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(image_speed == 0)
    {
      enigma::varaccess_sp(int(other))= 10 + (abs(enigma::varaccess_sp(int(other))))/ (double) 2;
      image_speed = 1;
      
    }
    else exit;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object38::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_looprailR::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(solid == 1 && enigma::varaccess_sp(int(Player))<=- .1 && enigma::varaccess_rn(int(global))== 0)
    {
      enigma::varaccess_rn(int(global))= 1;
      solid = 0;
      
    }
    if(solid == 0 && enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_rn(int(global))== 0)
    {
      enigma::varaccess_rn(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 0 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 1 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 320 || enigma::glaccess(int(Player))-> x > x + 320)
      enigma::varaccess_rn(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_looprailL::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(solid == 1 && enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_rn(int(global))== 0)
    {
      enigma::varaccess_rn(int(global))= 1;
      solid = 0;
      
    }
    if(solid == 0 && enigma::varaccess_sp(int(Player))<=- .1 && enigma::varaccess_rn(int(global))== 0)
    {
      enigma::varaccess_rn(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 0 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y < y && solid == 1 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 320 || enigma::glaccess(int(Player))-> x > x + 320)
      enigma::varaccess_rn(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object42::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(image_speed == 0)
    {
      enigma::varaccess_sp(int(other))=- 10 - (abs(enigma::varaccess_sp(int(other))))/ (double) 2;
      image_speed = 1;
      
    }
    else exit;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object42::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_goright::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> x > x + 15)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_gobottom::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> y > y + 15)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_xtralife::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_xtralife::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(busted == 0)
    {
      busted = 1;
      image_speed = .25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_xtralife::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    if(busted == 1)
    {
      lives += 1;
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_xtralife::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(busted == 0)
    {
      draw_sprite(59, 0, x, y);
      draw_sprite(58, 0, x, y);
      
    }
    else
    {
      n -= 2;
      draw_sprite(59, 0, x, y + n);
      draw_sprite(95, - 1, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_canyon::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    bw = 256;
    orgn0 = view_xview[0] - bw;
    orgn1 = view_xview[0] - bw;
    orgn2 = view_xview[0] - bw;
    orgn3 = view_xview[0] - bw;
    orgn4 = view_xview[0] - bw;
    orgn5 = view_xview[0] - bw;
    orgn6 = view_xview[0] - bw;
    orgn7 = view_xview[0] - bw;
    orgn8 = view_xview[0] - bw;
    orgn9 = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    bh = 352;
    orgny = 0;
    vyp = 0;
    vcy = vy - vyp;
    mxy = room_height - 512;
    mxvc = room_height - 160;
    ydiff = mxvc / (double) mxy;
    mx2y = room_height - 240;
    mx2vc = room_height - 160;
    y2diff = mx2vc / (double) mx2y;
    
  }
  action_sound(Bulletstation_0, 1);
  
  return 0;
}

variant enigma::OBJ_canyon::myevent_alarm_11()
{
  { if ((alarm[11] == -1) or (alarm[11]--)) return 0; }

  {
    
    {
      a += 1;
      w = background_get_width(10);
      h = background_get_height(10);
      for(i = 0; i < h; i += 1)
      {
        draw_background_part(10, 0, i, w, 1, orgn0 + sin((double)(degtorad(i * 6 + a * 6)))* 6 - 6, orgny + 160 + i);
        draw_background_part(10, 0, i, w, 1, orgn0 + 256 + sin((double)(degtorad(i * 6 + a * 6)))* 6 - 6, orgny + 160 + i);
        draw_background_part(10, 0, i, w, 1, orgn0 + 512 + sin((double)(degtorad(i * 6 + a * 6)))* 6 - 6, orgny + 160 + i);
        draw_background_part(10, 0, i, w, 1, orgn0 + 768 + sin((double)(degtorad(i * 6 + a * 6)))* 6 - 6, orgny + 160 + i);
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_canyon::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_rectangle_color(view_xview[0], view_yview[0], view_xview[0] + 320, view_yview[0] + 240, c_black, c_black, c_black, c_black, 0);
    vxp = vx;
    vx = view_xview[0];
    vc = vx - vxp;
    if(orgn0 < view_xview[0] - (bw * 2)|| orgn0 > view_xview[0] )
      orgn0 = view_xview[0] - bw;
    else orgn0 += vc / (double) 3;
    if(orgn1 < view_xview[0] - (bw * 2)|| orgn1 > view_xview[0] )
      orgn1 = view_xview[0] - bw;
    else orgn1 += vc / (double) 4;
    if(orgn2 < view_xview[0] - (bw * 2)|| orgn2 > view_xview[0] )
      orgn2 = view_xview[0] - bw;
    else orgn2 += vc / (double) 1.1875;
    if(orgn3 < view_xview[0] - (bw * 2)|| orgn3 > view_xview[0] )
      orgn3 = view_xview[0] - bw;
    else orgn3 += vc / (double) 1.375;
    if(orgn4 < view_xview[0] - (bw * 2)|| orgn4 > view_xview[0] )
      orgn4 = view_xview[0] - bw;
    else orgn4 += vc / (double) 1.75;
    if(orgn5 < view_xview[0] - (bw * 2)|| orgn5 > view_xview[0] )
      orgn5 = view_xview[0] - bw;
    else orgn5 += vc / (double) 2.125;
    if(orgn6 < view_xview[0] - (bw * 2)|| orgn6 > view_xview[0] )
      orgn6 = view_xview[0] - bw;
    else orgn6 += vc / (double) 2.5;
    if(orgn7 < view_xview[0] - (bw * 2)|| orgn7 > view_xview[0] )
      orgn7 = view_xview[0] - bw;
    else orgn7 += vc / (double) 2.875;
    if(orgn8 < view_xview[0] - (bw * 2)|| orgn8 > view_xview[0] )
      orgn8 = view_xview[0] - bw;
    else orgn8 += vc / (double) 3.25;
    if(orgn9 < view_xview[0] - (bw * 2)|| orgn9 > view_xview[0] )
      orgn9 = view_xview[0] - bw;
    else orgn9 += vc / (double) 3.625;
    
  }
  
  {
    vyp = vy;
    vy = view_yview[0];
    vcy = vy - vyp;
    orgny += vcy / (double) ydiff;
    orgn2y += vcy / (double) y2diff;
    
  }
  
  {
    draw_background_part(12, 0, 0, 256, 1, orgn2, orgny + 112);
    draw_background_part(12, 0, 0, 256, 1, orgn2 + 256, orgny + 112);
    draw_background_part(12, 0, 0, 256, 1, orgn2 + 512, orgny + 112);
    draw_background_part(12, 0, 0, 256, 1, orgn2 + 768, orgny + 112);
    draw_background_part(12, 0, 1, 256, 2, orgn3, orgny + 113);
    draw_background_part(12, 0, 1, 256, 2, orgn3 + 256, orgny + 113);
    draw_background_part(12, 0, 1, 256, 2, orgn3 + 512, orgny + 113);
    draw_background_part(12, 0, 1, 256, 2, orgn3 + 768, orgny + 113);
    draw_background_part(12, 0, 2, 256, 3, orgn4, orgny + 114);
    draw_background_part(12, 0, 2, 256, 3, orgn4 + 256, orgny + 114);
    draw_background_part(12, 0, 2, 256, 3, orgn4 + 512, orgny + 114);
    draw_background_part(12, 0, 2, 256, 3, orgn4 + 768, orgny + 114);
    draw_background_part(12, 0, 3, 256, 4, orgn5, orgny + 115);
    draw_background_part(12, 0, 3, 256, 4, orgn5 + 256, orgny + 115);
    draw_background_part(12, 0, 3, 256, 4, orgn5 + 512, orgny + 115);
    draw_background_part(12, 0, 3, 256, 4, orgn5 + 768, orgny + 115);
    draw_background_part(12, 0, 4, 256, 5, orgn6, orgny + 116);
    draw_background_part(12, 0, 4, 256, 5, orgn6 + 256, orgny + 116);
    draw_background_part(12, 0, 4, 256, 5, orgn6 + 512, orgny + 116);
    draw_background_part(12, 0, 4, 256, 5, orgn6 + 768, orgny + 116);
    draw_background_part(12, 0, 5, 256, 6, orgn7, orgny + 117);
    draw_background_part(12, 0, 5, 256, 6, orgn7 + 256, orgny + 117);
    draw_background_part(12, 0, 5, 256, 6, orgn7 + 512, orgny + 117);
    draw_background_part(12, 0, 5, 256, 6, orgn7 + 768, orgny + 117);
    draw_background_part(12, 0, 6, 256, 7, orgn8, orgny + 118);
    draw_background_part(12, 0, 6, 256, 7, orgn8 + 256, orgny + 118);
    draw_background_part(12, 0, 6, 256, 7, orgn8 + 512, orgny + 118);
    draw_background_part(12, 0, 6, 256, 7, orgn8 + 768, orgny + 118);
    draw_background_part(12, 0, 7, 256, 8, orgn9, orgny + 119);
    draw_background_part(12, 0, 7, 256, 8, orgn9 + 256, orgny + 119);
    draw_background_part(12, 0, 7, 256, 8, orgn9 + 512, orgny + 119);
    draw_background_part(12, 0, 7, 256, 8, orgn9 + 768, orgny + 119);
    draw_background(13, view_xview[0], orgny);
    draw_background(13, view_xview[0] + 256, orgny);
    draw_background(11, orgn1, orgny + 120);
    draw_background(11, orgn1 + 256, orgny + 120);
    draw_background(11, orgn1 + 512, orgny + 120);
    draw_background(11, orgn1 + 768, orgny + 120);
    
    {
      draw_background(10, orgn0, orgny + 160);
      draw_background(10, orgn0 + 256, orgny + 160);
      draw_background(10, orgn0 + 512, orgny + 160);
      draw_background(10, orgn0 + 768, orgny + 160);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_looprailTL::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(solid == 1 && enigma::varaccess_sp(int(Player))<=- .1 && enigma::varaccess_r2n(int(global))== 0)
    {
      enigma::varaccess_r2n(int(global))= 1;
      solid = 0;
      
    }
    if(solid == 0 && enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_r2n(int(global))== 0)
    {
      enigma::varaccess_r2n(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y > y + 88 && solid == 0 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y > y + 88 && solid == 1 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 320 || enigma::glaccess(int(Player))-> x > x + 320)
      enigma::varaccess_r2n(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_looprailTR::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(solid == 1 && enigma::varaccess_sp(int(Player))>= .1 && enigma::varaccess_r2n(int(global))== 0)
    {
      enigma::varaccess_r2n(int(global))= 1;
      solid = 0;
      
    }
    if(solid == 0 && enigma::varaccess_sp(int(Player))<=- .1 && enigma::varaccess_r2n(int(global))== 0)
    {
      enigma::varaccess_r2n(int(global))= 1;
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y > y + 88 && solid == 0 && enigma::varaccess_sp(int(Player))>= .1)
    {
      solid = 1;
      
    }
    if(enigma::glaccess(int(Player))-> y > y + 88 && solid == 1 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      solid = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 320 || enigma::glaccess(int(Player))-> x > x + 320)
      enigma::varaccess_r2n(int(global))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_elevator::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 1;
    action_create_object(elevatoredge, - 24, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(elevatoredge, 136, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_elevator::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> x > x && enigma::glaccess(int(Player))-> x < x + 144 && enigma::glaccess(int(Player))-> y < y)
    {
      if(! place_meeting(x, y - 2, stopper))
        y -= 2;
      
    }
    else
    {
      if(! place_meeting(x, y + 2, Block)&& ! place_meeting(x, y + 16, Player))
        y += 2;
      
    }
    if(place_meeting(x, y - 2, Player))
    {
      enigma::glaccess(int(Player))-> y = y - 16;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_elevatoredge::myevent_endstep()
{
  
  {
    y = enigma::glaccess(int(elevator))-> y;
    if(enigma::glaccess(int(Player))-> y < y - 14)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emerald::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    u = 1;
    move = 0;
    orbit = 0;
    nx = 0;
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(10, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emerald::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 0;
    action_set_alarm(10, 0);
    
  }
  
  {
    instance_create(x + 256, y - (3 * move), specialring);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emerald::myevent_beginstep()
{
  
  {
    instance_create(x + enigmarandom(16), y + enigmarandom(16), emeralddust);
    instance_create(x + enigmarandom(16), y - enigmarandom(16), emeralddust);
    if(u == 1 && move < 16)
    {
      y -= .5;
      move += 1;
      
    }
    if(u == 1 && move == 16)
    {
      u = 0;
      move = 0;
      
    }
    if(u == 0 && move < 16)
    {
      y += .5;
      move += 1;
      
    }
    if(u == 0 && move == 16)
    {
      u = 1;
      move = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emerald::myevent_endstep()
{
  
  {
    if(orbit == 1 && x < enigma::glaccess(int(Player))-> x - 32)
    {
      hspeed = .5;
      gravity_direction = 0;
      depth = 100;
      
    }
    if(orbit == 1 && x > enigma::glaccess(int(Player))-> x + 32)
    {
      hspeed =- .5;
      gravity_direction = 180;
      depth =- 100;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emerald::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(orbit == 0)
    {
      orbit = 1;
      gravity = .75;
      gravity_direction = 180;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emeralddust::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    hspeed =- 12;
    image_speed = 1 / (double) 4;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_emeralddust::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_specialring::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_hspeed(- 12);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_specialring::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(ring, 0);
  
  return 0;
}

variant enigma::OBJ_object57::myevent_endstep()
{
  
  {
    if(enigma::varaccess_rings(int(global))>= 80)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_badsonic::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    vspeed =- 6;
    gravity = .75;
    view_object[0]= object_index;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_badsonic::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
action_current_room(0);
  
  return 0;
}

variant enigma::OBJ_movingfloor::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    bw = 96;
    orgn = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vc = vx - vxp;
    bonus = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_movingfloor::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    vxp = vx;
    vx = view_xview[0];
    vc =(vx - vxp)+ bonus;
    if(orgn < view_xview[0] - (bw * 2)|| orgn > view_xview[0] )
      orgn = view_xview[0] - bw + (vc * 2);
    else orgn += vc;
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(background16, orgn, 112, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(background16, orgn + bw, 112, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(background16, orgn + (bw * 2), 112, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(background16, orgn + (bw * 3), 112, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(background16, orgn + (bw * 4), 112, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object66::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
    enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
    enigma::varaccess_jmp(int(other))= 1;
    enigma::glaccess(int(other))-> vspeed =- 15;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object66::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object68::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> y < y - 14)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object69::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    on = 0;
    p = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object69::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> x > x + 28 && enigma::glaccess(int(Player))-> x < x + 36 && enigma::glaccess(int(Player))-> y < y && enigma::glaccess(int(Player))-> y > y - 18)
    {
      on = 1;
      
    }
    if(on == 1)
    {
      vspeed = 2;
      if(view_yview[0] < room_height - 162)
        view_yview[0] += 2;
      
    }
    
  }
  if(action_if(enigma::glaccess(int(Player))-> x > x + 28 && enigma::glaccess(int(Player))-> x < x + 36 && enigma::glaccess(int(Player))-> y < y && enigma::glaccess(int(Player))-> y > y - 18))
  {
    
    {
      if(instance_exists(knuckles))
        p = 1;
      
    }
    with(Player)
    {
      action_kill_object();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object69::myevent_outsideroom()
{
  if (!((x+bbox_right < 0) || (x+bbox_left > room_width) || (y+bbox_bottom < 0) || (y+bbox_top > room_height))) return 0;
if(action_if_next_room())
    action_next_room(9);
  
  return 0;
}

variant enigma::OBJ_object69::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(sprCurve1, - 1, x, y);
    if(on == 1)
    {
      if(p == 0)
        draw_sprite_ext(53, 2, x + 32, y - 15, - 1, 1, 0, c_white, 1);
      else draw_sprite_ext(123, 1, x + 32, y - 15, - 1, 1, 0, c_white, 1);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_movie::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
    enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
    view_object[0]= object_index;
    sp = enigma::varaccess_sp(int(Player));
    enigma::varaccess_fixme_alarm(int(eggopening))(0)= 90;
    
  }
  with(Player)
  {
    action_kill_object();
    
  }
  
  {
    instance_create(x - 16, y + 16, AngleLeft);
    instance_create(x + 16, y + 16, AngleRight);
    r =- 1;
    image_speed = .5;
    angle = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_movie::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(AngleRight))
    {
      radians = degtorad(angle);
      if(x > 3888 && x < 4300 && sp < 10)
        sp += 0.2;
      if(x > 4300 && x < 4400 && sp > 0)
        sp -= 0.2;
      
    }
    if(x > 4395 && x < 4405)
      sp = 0;
    if(sp != 0)
    {
      for(i = 0; i < abs(sp); i += 1)
      {
        if(sp <= 0)
          break;
        x += cos((double)(radians));
        y -= sin((double)(radians));
        
      }
      for(i = 0; i < abs(sp); i += 1)
      {
        if(sp >= 0)
          break;
        x -= cos((double)(radians));
        y += sin((double)(radians));
        
      }
      
    }
    if(place_free(x, y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(! place_free(x, y))
          break;
        x += sin((double)(radians));
        y += cos((double)(radians));
        
      }
      
    }
    if(! place_free(x, y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(place_free(x, y))
          break;
        x -= sin((double)(radians));
        y -= cos((double)(radians));
        
      }
      
    }
    
  }
  if(action_if_number(AngleRight, 0, 2))
  {
    radians = degtorad(angle);
    if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
          break;
        tempA1 += 1;
        enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
        enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
        
      }
      
    }
    if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
          break;
        tempA1 -= 1;
        enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
        enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
        
      }
      
    }
    if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
          break;
        tempA2 += 1;
        enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
        enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
        
      }
      
    }
    if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
    {
      for(i = 0; i < 20; i += 1)
      {
        if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
          break;
        tempA2 -= 1;
        enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
        enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
        
      }
      
    }
    
  }
  
  {
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_movie::myevent_endstep()
{
  
  {
    spd = sqrt(sqr(x - xprevious)+ sqr(y - yprevious));
    if(r ==- 1 && sp < 0)
      skid = 1;
    else
    {
      if(r == 1 && sp > 0)
        skid = 1;
      else skid = 0;
      
    }
    if(abs(spd)> .01 && abs(spd)< 3.01)
      walk = 1;
    else walk = 0;
    if(abs(spd)> 3.01 && abs(spd)< 6.01)
      jog = 1;
    else jog = 0;
    if(abs(spd)> 6.01 && abs(spd)< 9.01)
      run = 1;
    else run = 0;
    if(abs(spd)> 9.01)
      fast = 1;
    else fast = 0;
    if(abs(spd)< .01)
      stp = 1;
    else stp = 0;
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 0)
    {
      if(r ==- 1)
      {
        if(vspd < 0)
          sp -= .45;
        else sp += .45;
        
      }
      else
      {
        if(vspd < 0)
          sp += .45;
        else sp -= .45;
        
      }
      
    }
    if(place_free(x, y + 2)&& abs(sp)< .3 && grinding == 0)
    {
      gravity = .75;
      sp = 0;
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      gravity = .75;
      angle = 0;
      
    }
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 1)
    {
      if(r ==- 1)
      {
        if(vspd < - .5)
          sp -= .45;
        if(vspd > - .5 && vspd < .5)
        {
          r = 1;
          sp += .45;
          
        }
        if(vspd >= .5)
          sp += .45;
        
      }
      else
      {
        if(vspd < - .5)
          sp += .45;
        if(vspd > - .5 && vspd < .5)
        {
          r =- 1;
          sp -= .45;
          
        }
        if(vspd >= .5)
          sp -= .45;
        
      }
      
    }
    if(on == 6)
      on = 0;
    else on += 1;
    
  }
  if(action_if(enigma::glaccess(int(eggopening))-> x > x + 128))
  {
    
    {
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      
    }
    action_kill_object();
    
    {
      argument_relative = 1;
      action_create_object(Player, 0, 0);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_movie::myevent_globalleftpress()
{
  action_current_room(0);
  
  return 0;
}

variant enigma::OBJ_movie::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(jmp == 0 && dash == 0 && grinding == 0 && skid == 0 && slep == 0 && cr == 0 && enigma::varaccess_bonus(int(global))== 0)
    {
      if(walk == 1 && psh == 0)
        draw_sprite_ext(11, - 1, x, y, r, 1, angle, c_white, 1);
      if(jog == 1)
        draw_sprite_ext(12, - 1, x, y, r, 1, angle, c_white, 1);
      if(run == 1)
        draw_sprite_ext(13, - 1, x, y, r, 1, angle, c_white, 1);
      if(fast == 1)
        draw_sprite_ext(14, - 1, x, y, r, 1, angle, c_white, 1);
      if(stp == 1 && psh == 0)
        draw_sprite_ext(10, - 1, x, y + 1, r, 1, angle, c_white, 1);
      if(psh == 1)
        draw_sprite_ext(109, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(enigma::varaccess_bonus(int(global))== 1 && jmp == 0)
      draw_sprite_ext(14, - 1, x, y, - 1, 1, angle, c_white, 1);
    if(skid == 1 && jmp == 0 && grinding == 0 && bonus == 0)
      draw_sprite_ext(17, - 1, x, y, r, 1, angle, c_white, 1);
    if(jmp > 0 && dash == 0 && grinding == 0)
    {
      draw_sprite_ext(16, - 1, x, y, r, 1, 0, c_white, 1);
      
    }
    if(slep == 1 && grinding == 0 && bonus == 0)
    {
      draw_sprite_ext(34, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(grinding == 1)
    {
      if(sp > 0)
        r =- 1;
      else r = 1;
      draw_sprite_ext(18, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(wateron == 1)
      draw_sprite_ext(113, - 1, x, y, r, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    alarm[0]= 45;
    alarm[1]= 45;
    nx = 0;
    enigma::varaccess_enigmawait(int(Player))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 1;
    nx += 8;
    if(nx > 240)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    enigma::varaccess_fixme_alarm(int(hud))(0)= 1;
    enigma::varaccess_enigmawait(int(Player))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::myevent_endstep()
{
  
  {
    draw_set_color(c_black);
    draw_rectangle(x - 120 - nx, y - 80, x + 120 - nx, y + 80, 0);
    draw_set_color(c_red);
    draw_rectangle(x - 72, y - 80 - nx, x - 24, y + 34 - nx, 0);
    col = make_color_rgb(32, 36, 32);
    draw_set_color(col);
    draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    enigmadraw_text(x + nx, y, "RAIL CANYON");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
Title_4(("RAIL CANYON"), (1), (0), (0), (0));
  
  return 0;
}

variant enigma::OBJ_Rail_Canyon::_SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  x = view_xview[0] + 120;
  y = view_yview[0] + 80;
  draw_set_color(c_black);
  draw_sprite_ext(sprBlock, 0, x - 120, y - 80, 2, 2, 0, c_black, 1 - (nx / (double) 240));
  draw_set_color(c_red);
  draw_rectangle(x - 72, y - 80 - nx, x - 23, y + 35 - nx, 0);
  draw_sprite(sprCredit, 1, x - 48, y + 13 - nx);
  col = make_color_rgb(32, 36, 32);
  draw_set_color(col);
  draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
  draw_set_color(c_white);
  font = font_add_sprite(alphabet3, 57, 1, 2);
  draw_set_font(font);
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  enigmadraw_text(x + nx, y, argument0);
  draw_sprite(67, enigma::varaccess_act(int(global)), x + 8 + nx, y);
  
  return 0;
}

variant enigma::OBJ_Route_99::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    alarm[0]= 45;
    alarm[1]= 45;
    nx = 0;
    enigma::varaccess_enigmawait(int(Player))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Route_99::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 1;
    nx += 8;
    if(nx > 240)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Route_99::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    enigma::varaccess_fixme_alarm(int(hud))(0)= 1;
    enigma::varaccess_enigmawait(int(Player))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Route_99::myevent_endstep()
{
  
  {
    draw_set_color(c_black);
    draw_rectangle(x - 120 - nx, y - 80, x + 120 - nx, y + 80, 0);
    draw_set_color(c_red);
    draw_rectangle(x - 72, y - 80 - nx, x - 24, y + 34 - nx, 0);
    col = make_color_rgb(32, 36, 32);
    draw_set_color(col);
    draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    enigmadraw_text(x + nx, y, "RAIL CANYON");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Route_99::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
Title_4(("ROUTE 99"), (1), (0), (0), (0));
  
  return 0;
}

variant enigma::OBJ_Route_99::_SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  x = view_xview[0] + 120;
  y = view_yview[0] + 80;
  draw_set_color(c_black);
  draw_sprite_ext(sprBlock, 0, x - 120, y - 80, 2, 2, 0, c_black, 1 - (nx / (double) 240));
  draw_set_color(c_red);
  draw_rectangle(x - 72, y - 80 - nx, x - 23, y + 35 - nx, 0);
  draw_sprite(sprCredit, 1, x - 48, y + 13 - nx);
  col = make_color_rgb(32, 36, 32);
  draw_set_color(col);
  draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
  draw_set_color(c_white);
  font = font_add_sprite(alphabet3, 57, 1, 2);
  draw_set_font(font);
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  enigmadraw_text(x + nx, y, argument0);
  draw_sprite(67, enigma::varaccess_act(int(global)), x + 8 + nx, y);
  
  return 0;
}

variant enigma::OBJ_Special___Stage::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    alarm[0]= 45;
    alarm[1]= 45;
    nx = 0;
    enigma::varaccess_act(int(global))= 2;
    enigma::varaccess_enigmawait(int(Player))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Special___Stage::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 1;
    nx += 8;
    if(nx > 240)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Special___Stage::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    enigma::varaccess_fixme_alarm(int(hud))(0)= 1;
    enigma::varaccess_enigmawait(int(Player))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Special___Stage::myevent_endstep()
{
  
  {
    draw_set_color(c_black);
    draw_rectangle(x - 120 - nx, y - 80, x + 120 - nx, y + 80, 0);
    draw_set_color(c_red);
    draw_rectangle(x - 72, y - 80 - nx, x - 24, y + 34 - nx, 0);
    col = make_color_rgb(32, 36, 32);
    draw_set_color(col);
    draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    enigmadraw_text(x + nx, y, "RAIL CANYON");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Special___Stage::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
Title_4(("SPECIAL STAGE"), (0), (0), (0), (0));
  
  return 0;
}

variant enigma::OBJ_Special___Stage::_SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  x = view_xview[0] + 120;
  y = view_yview[0] + 80;
  draw_set_color(c_black);
  draw_sprite_ext(sprBlock, 0, x - 120, y - 80, 2, 2, 0, c_black, 1 - (nx / (double) 240));
  draw_set_color(c_red);
  draw_rectangle(x - 72, y - 80 - nx, x - 23, y + 35 - nx, 0);
  draw_sprite(sprCredit, 1, x - 48, y + 13 - nx);
  col = make_color_rgb(32, 36, 32);
  draw_set_color(col);
  draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
  draw_set_color(c_white);
  font = font_add_sprite(alphabet3, 57, 1, 2);
  draw_set_font(font);
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  enigmadraw_text(x + nx, y, argument0);
  draw_sprite(67, enigma::varaccess_act(int(global)), x + 8 + nx, y);
  
  return 0;
}

variant enigma::OBJ_intro::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    x =- 168;
    y = 168;
    d3d_start();
    image_speed = 1 / (double) 3;
    alarm[0]= 244;
    f = 0;
    grd = sprite_get_texture(70, f);
    sky = sprite_get_texture(71, f);
    draw_set_color(c_white);
    sound_loop(4);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 10;
    f += 1;
    sound_play(5);
    grd = sprite_get_texture(70, f);
    sky = sprite_get_texture(71, f);
    if(c == c_white)
      c = c_black;
    else c = c_white;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    draw_primitive_begin_texture(pr_trianglestrip, tex);
    draw_vertex_texture(0, 0, 1, 1);
    draw_vertex_texture(0, 112, 1, 1);
    draw_vertex_texture(672, 0, 1, 1);
    draw_vertex_texture(336, 112, 1, 1);
    draw_primitive_end();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_endstep()
{
  
  {
    x -= 3 / (double) 5;
    y -= 4 / (double) 5;
    
  }
  if(action_if(f == 9))
    action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_intro::myevent_roomend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    d3d_end();
    lives = 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_intro::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    d3d_set_perspective(1);
    d3d_set_projection(x, y, 0, x + 12, y, 0, 0, 0, 1);
    d3d_draw_floor(- 512, - 512, - 32, 512, 512, 0, grd, 4, 8);
    d3d_draw_floor(- 512, - 512, 32, 512, 512, 0, sky, 4, 8);
    d3d_set_projection_ortho(0, 0, 336, 224, 0);
    draw_sprite(69, - 1, 168, 128);
    if(sound_isplaying(5)== 1)
    {
      draw_sprite_ext(45, 0, 0, 0, 12, 10, 0, c, .5);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_titlescreen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(10, 0);
    
  }
  
  {
    alpha = 0;
    go = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_titlescreen::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 0;
    action_set_alarm(10, 0);
    
  }
  
  {
    if(background_visible(0)== 1)
      background_visible(0)= 0;
    else background_visible(0)= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_titlescreen::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }
action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_titlescreen::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(go == 1)
    {
      alpha += 1 / (double) 30;
      draw_background_ext(SA3_Armageddon, 56, 32, 1, 1, 0, c_white, alpha);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_titlescreen::myevent_keypress_13()
{
  
  {
    background_visible(2)= 0;
    alarm[1]= 30;
    go = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    
  }
  
  {
    instance_create(x - 16, y + 16, AngleLeft);
    instance_create(x + 16, y + 16, AngleRight);
    r =- 1;
    image_speed = .5;
    score = 0;
    bonus = enigma::varaccess_bonus(int(global));
    inair = 0;
    enigmawait = 1;
    ani = 83;
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(90, 6);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_alarm_6()
{
  { if ((alarm[6] == -1) or (alarm[6]--)) return 0; }

  {
    if(bonus == 0)
    {
      slep = 1;
      image_index = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_step()
{
  enigma::propagate_locals(this);
if(action_if_variable(enigmawait, 0, 0))
  {
    
    {
      if(instance_exists(AngleRight))
      {
        radians = degtorad(angle);
        if(grinding == 1 && sp > 0)
        {
          if(keyboard_check(vk_right)&& sp < 10)
            sp += 0.2;
          
        }
        if(grinding == 1 && sp < 0)
        {
          if(keyboard_check(vk_left)&& sp > - 10)
            sp -= 0.2;
          
        }
        if(grinding == 0)
        {
          if(keyboard_check(vk_right)&& sp < 10 && bonus == 0)
            sp += 0.2;
          if(keyboard_check(vk_left)&& sp > - 10 && bonus == 0)
            sp -= 0.2;
          
        }
        if(! keyboard_check(vk_right)&& sp > 0 && grinding == 0 && bonus == 0)
          sp -= 0.2;
        if(! keyboard_check(vk_left)&& sp < 0 && grinding == 0 && bonus == 0)
          sp += 0.2;
        if(grinding == 0)
        {
          if(keyboard_check(vk_right)&& sp < 2 && bonus == 1)
            sp += 0.2;
          
        }
        if(! keyboard_check(vk_right)&& sp > 1 && grinding == 0 && enigma::varaccess_bonus(int(global))== 1)
          sp -= 0.2;
        if(enigma::varaccess_bonus(int(global))== 1 && sp < 1)
          sp = 1;
        if(abs(sp)< 0.2)
          sp = 0;
        if(sp != 0)
        {
          for(i = 0; i < abs(sp); i += 1)
          {
            if(sp <= 0)
              break;
            x += cos((double)(radians));
            y -= sin((double)(radians));
            
          }
          for(i = 0; i < abs(sp); i += 1)
          {
            if(sp >= 0)
              break;
            x -= cos((double)(radians));
            y += sin((double)(radians));
            
          }
          
        }
        if(place_free(x, y))
        {
          for(i = 0; i < 20; i += 1)
          {
            if(! place_free(x, y))
              break;
            x += sin((double)(radians));
            y += cos((double)(radians));
            
          }
          
        }
        if(! place_free(x, y))
        {
          for(i = 0; i < 20; i += 1)
          {
            if(place_free(x, y))
              break;
            x -= sin((double)(radians));
            y -= cos((double)(radians));
            
          }
          
        }
        
      }
      
    }
    if(action_if_number(AngleRight, 0, 2))
    {
      radians = degtorad(angle);
      if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
            break;
          tempA1 += 1;
          enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          
        }
        
      }
      if(! place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(place_free(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y))
            break;
          tempA1 -= 1;
          enigma::glaccess(int(AngleLeft))-> x =(enigma::glaccess(int(Player))-> x - sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          enigma::glaccess(int(AngleLeft))-> y =(enigma::glaccess(int(Player))-> y - cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA1);
          
        }
        
      }
      if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
            break;
          tempA2 += 1;
          enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          
        }
        
      }
      if(! place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
      {
        for(i = 0; i < 20; i += 1)
        {
          if(place_free(enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y))
            break;
          tempA2 -= 1;
          enigma::glaccess(int(AngleRight))-> x =(enigma::glaccess(int(Player))-> x + sin((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)- (cos((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          enigma::glaccess(int(AngleRight))-> y =(enigma::glaccess(int(Player))-> y + cos((double)(enigma::varaccess_radians(int(Player))+ 90))* 12)+ (sin((double)(enigma::varaccess_radians(int(Player))+ 90))* tempA2);
          
        }
        
      }
      
    }
    
    {
      if(abs(sp)> 0)
        angle = point_direction(enigma::glaccess(int(AngleLeft))-> x, enigma::glaccess(int(AngleLeft))-> y, enigma::glaccess(int(AngleRight))-> x, enigma::glaccess(int(AngleRight))-> y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_endstep()
{
  
  {
    spd = sqrt(sqr(x - xprevious)+ sqr(y - yprevious));
    hspd = x - xprevious;
    vspd = y - yprevious;
    if(r ==- 1 && sp < 0)
      skid = 1;
    else
    {
      if(r == 1 && sp > 0)
        skid = 1;
      else skid = 0;
      
    }
    if(abs(spd)> .01 && abs(spd)< 3.01)
      walk = 1;
    else walk = 0;
    if(abs(spd)> 3.01 && abs(spd)< 6.01)
      jog = 1;
    else jog = 0;
    if(abs(spd)> 6.01 && abs(spd)< 9.01)
      run = 1;
    else run = 0;
    if(abs(spd)> 9.01)
      fast = 1;
    else fast = 0;
    if(abs(spd)< .01)
      stp = 1;
    else stp = 0;
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 0)
    {
      if(r ==- 1)
      {
        if(vspd < 0)
          sp -= .45;
        else sp += .45;
        
      }
      else
      {
        if(vspd < 0)
          sp += .45;
        else sp -= .45;
        
      }
      
    }
    if(place_free(x, y + 2)&& abs(sp)< .3 && grinding == 0)
    {
      gravity = .75;
      sp = 0;
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      gravity = .75;
      angle = 0;
      
    }
    if(place_free(x, y + 2)&& jmp == 0 && grinding == 1)
    {
      if(r ==- 1)
      {
        if(vspd < - .5)
          sp -= .45;
        if(vspd > - .5 && vspd < .5)
        {
          r = 1;
          sp += .45;
          
        }
        if(vspd >= .5)
          sp += .45;
        
      }
      else
      {
        if(vspd < - .5)
          sp += .45;
        if(vspd > - .5 && vspd < .5)
        {
          r =- 1;
          sp -= .45;
          
        }
        if(vspd >= .5)
          sp -= .45;
        
      }
      
    }
    if(on == 6)
      on = 0;
    else on += 1;
    
  }
  
  {
    if(r ==- 1)
    {
      if(place_meeting(x + cos((double)(radians - pi / (double) 2)), y - sin((double)(radians - pi / (double) 2)), rail2))
        grinding = 1 && instance_create(x + 17 * (cos((double)(radians - pi / (double) 2))), y - 17 * (sin((double)(radians - pi / (double) 2))), spark);
      else grinding = 0;
      
    }
    if(r == 1)
    {
      if(place_meeting(x - cos((double)(radians + pi / (double) 2)), y + sin((double)(radians + pi / (double) 2)), rail2))
        grinding = 1 && instance_create(x - 17 * (cos((double)(radians + pi / (double) 2))), y + 17 * (sin((double)(radians + pi / (double) 2))), spark);
      else grinding = 0;
      
    }
    if(place_meeting(x, y + 2, watersurface)&& abs(sp)> 8)
      wateron = 1;
    else wateron = 0;
    if(skid == 1 && grinding == 0 && on == 0 && jmp == 0)
    {
      if(r ==- 1)
        instance_create(x + 17 * (cos((double)(radians - pi / (double) 2))), y - 17 * (sin((double)(radians - pi / (double) 2))), dust);
      else instance_create(x - 17 * (cos((double)(radians + pi / (double) 2))), y + 17 * (sin((double)(radians + pi / (double) 2))), dust);
      
    }
    
  }
  
  {
    if(! place_meeting(x + 17 * (cos((double)(radians - pi / (double) 2))), y - 17 * (sin((double)(radians - pi / (double) 2))), Block))
    {
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      hspeed = hspd;
      vspeed = vspd;
      angle = 0;
      gravity = .5;
      inair = 1;
      sp = 0;
      
    }
    else inair = 0;
    
  }
  
  {
    if(! instance_exists(AngleRight))
      sp = hspd * (5 / (double) 6);
    if((abs(sp)> 10 || abs(speed)> 10)&& (on == 0 || on == 4))
      instance_create(x, y, afterimageknux);
    if(enigma::varaccess_bonus(int(global))== 1 && (on == 0 || on == 4))
      instance_create(x, y, afterimageknux);
    
  }
  
  {
    if(! place_free(x, y - 24)&& jmp == 1)
    {
      vspeed = 1;
      
    }
    if(hspeed > 15)
      hspeed = 15;
    if(hspeed < - 15)
      hspeed =- 15;
    if(y > enigma::varaccess_wl(int(global))&& vspeed > 10)
      vspeed = 10;
    
  }
  
  {
    if(place_meeting(x + hspd, y, wall)&& enigma::varaccess_broken(int(icewall))== 0)
    {
      if(r ==- 1)
      {
        if(hspd > .01)
          x = enigma::glaccess(int(other))-> x - 2;
        if(hspd < - .01)
          x = enigma::glaccess(int(other))-> x + 4;
        
      }
      if(r == 1)
      {
        if(hspd < - .01)
          x = enigma::glaccess(int(other))-> x + 4;
        if(hspd > .01)
          x = enigma::glaccess(int(other))-> x - 2;
        
      }
      sp = 0;
      hspeed = 0;
      psh = 1;
      
    }
    else psh = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    if(slep == 1 && ani == 85)
      image_index = 1;
    if(slep == 1 && ani == 83)
      ani = 85;
    if(stp == 1 && alarm[6] < 2 && slep == 0)
      alarm[6]= 90;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(jmp == 0 && dash == 0 && grinding == 0 && skid == 0 && slep == 0 && cr == 0 && bonus == 0)
    {
      if(walk == 1 && psh == 0)
        draw_sprite_ext(73, - 1, x, y, r, 1, angle, c_white, 1);
      if(jog == 1)
        draw_sprite_ext(74, - 1, x, y, r, 1, angle, c_white, 1);
      if(run == 1)
        draw_sprite_ext(75, - 1, x, y, r, 1, angle, c_white, 1);
      if(fast == 1)
        draw_sprite_ext(76, - 1, x, y, r, 1, angle, c_white, 1);
      if(stp == 1 && psh == 0)
        draw_sprite_ext(84, - 1, x, y + 1, r, 1, angle, c_white, 1);
      if(psh == 1)
        draw_sprite_ext(72, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(bonus == 1 && jmp == 0)
      draw_sprite_ext(76, - 1, x, y, - 1, 1, angle, c_white, 1);
    if(skid == 1 && jmp == 0 && grinding == 0 && bonus == 0)
      draw_sprite_ext(78, - 1, x, y, r, 1, angle, c_white, 1);
    if(jmp == 1 && dash == 0 && grinding == 0)
    {
      draw_sprite_ext(77, - 1, x, y, r, 1, 0, c_white, 1);
      
    }
    if(slep == 1 && grinding == 0 && bonus == 0)
    {
      draw_sprite_ext(ani, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(grinding == 1)
    {
      if(sp > 0)
        r =- 1;
      else r = 1;
      draw_sprite_ext(79, - 1, x, y, r, 1, angle, c_white, 1);
      
    }
    if(wateron == 1)
      draw_sprite_ext(113, - 1, x, y, r, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_keypress_90()
{
  
  {
    if(jmp == 0 && inair == 0 && enigmawait == 0)
    {
      sound_play(jump);
      hspeed = sp / (double)(5 / (double) 6);
      jmp = 1;
      gravity = .75;
      if(r ==- 1)
        jp = pi / (double) 2;
      if(r == 1)
        jp =- pi / (double) 2;
      if(r ==- 1)
      {
        hspeed = 8 * (cos((double)(radians + jp)))+ hspd;
        vspeed =- 8 * (sin((double)(radians + jp)))+ vspd;
        
      }
      if(r == 1)
      {
        hspeed =- 8 * (cos((double)(radians + jp)))+ hspd;
        vspeed = 8 * (sin((double)(radians + jp)))+ vspd;
        
      }
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      sp = 0;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_knuckles::myevent_keyrelease_90()
{
  
  {
    if(vspeed < - 1)
      vspeed =- 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_afterimageknux::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_alpha = .75;
    image_index = enigma::glaccess(int(Player))-> image_index;
    angle = enigma::varaccess_angle(int(Player));
    image_speed = 0;
    alarm[0]= 2;
    walk = enigma::varaccess_walk(int(Player));
    jog = enigma::varaccess_jog(int(Player));
    run = enigma::varaccess_run(int(Player));
    fast = enigma::varaccess_fast(int(Player));
    skid = enigma::varaccess_skid(int(Player));
    jmp = enigma::varaccess_jmp(int(Player));
    slep = enigma::varaccess_slep(int(Player));
    grinding = enigma::varaccess_grinding(int(Player));
    bonus = enigma::varaccess_bonus(int(global));
    r = enigma::varaccess_r(int(Player));
    col = make_color_rgb(127, 127, 127);
    if(enigma::varaccess_bonus(int(city))!= 0)
      hspeed = enigma::varaccess_bonus(int(city));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_afterimageknux::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(image_alpha > 0)
    {
      image_alpha +=- .25;
      alarm[0]= 2;
      
    }
    else instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_afterimageknux::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(jmp == 0 && dash == 0 && grinding == 0 && skid == 0 && slep == 0 && cr == 0 && bonus == 0)
    {
      if(walk == 1)
        draw_sprite_ext(73, - 1, x, y, r, 1, angle, col, image_alpha);
      if(jog == 1)
        draw_sprite_ext(74, - 1, x, y, r, 1, angle, col, image_alpha);
      if(run == 1)
        draw_sprite_ext(75, - 1, x, y, r, 1, angle, col, image_alpha);
      if(fast == 1)
        draw_sprite_ext(76, - 1, x, y, r, 1, angle, col, image_alpha);
      if(stp == 1 && psh == 0)
        draw_sprite_ext(72, - 1, x, y + 1, r, 1, angle, col, image_alpha);
      if(psh == 1)
        draw_sprite_ext(5, - 1, x, y, r, 1, angle, col, image_alpha);
      
    }
    if(bonus == 1 && jmp == 0)
      draw_sprite_ext(76, - 1, x, y, - 1, 1, angle, col, image_alpha);
    if(skid == 1 && jmp == 0 && grinding == 0 && bonus == 0)
      draw_sprite_ext(78, - 1, x, y, r, 1, angle, col, image_alpha);
    if(jmp == 1 && dash == 0 && grinding == 0)
      draw_sprite_ext(77, - 1, x, y, r, 1, 0, col, image_alpha);
    if(slep == 1 && grinding == 0 && bonus == 0)
      draw_sprite_ext(72, - 1, x, y, r, 1, angle, col, image_alpha);
    if(grinding == 1 && bonus == 0)
      draw_sprite_ext(79, - 1, x, y, r, 1, angle, col, image_alpha);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_s(int(global))= 1;
    image_speed = 4 / (double) 15;
    imgs = 0;
    imgk = 2;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_next_room(7);
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(81, imgs, 102, 62);
    draw_sprite(80, imgk, 168, 59);
    draw_sprite(82, - 1, 246, 96);
    draw_sprite_ext(82, - 1, 102, 96, - 1, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_keypress_13()
{
  
  {
    alarm[0]= 45;
    if(enigma::varaccess_s(int(global))== 1)
      imgs = 1;
    else imgk = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_keypress_37()
{
  
  {
    if(enigma::varaccess_s(int(global))== 1 && imgs != 1)
    {
      enigma::varaccess_s(int(global))= 0;
      imgs = 2;
      imgk = 0;
      
    }
    else
    {
      if(enigma::varaccess_s(int(global))== 0 && imgk != 1)
      {
        enigma::varaccess_s(int(global))= 1;
        imgs = 0;
        imgk = 2;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_playerpick::myevent_keypress_39()
{
  
  {
    if(enigma::varaccess_s(int(global))== 1 && imgs != 1)
    {
      enigma::varaccess_s(int(global))= 0;
      imgs = 2;
      imgk = 0;
      
    }
    else
    {
      if(enigma::varaccess_s(int(global))== 0 && imgk != 1)
      {
        enigma::varaccess_s(int(global))= 1;
        imgs = 0;
        imgk = 2;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spike_shield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    col = c_white;
    sound_play(10);
    if(instance_exists(speachopening))
      enigma::varaccess_wrote(int(speachopening))= enigma::varaccess_writ5e(int(speachopening));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spike_shield::myevent_endstep()
{
  
  {
    if(instance_exists(Player))
    {
      x = enigma::glaccess(int(Player))-> x;
      y = enigma::glaccess(int(Player))-> y;
      
    }
    if(instance_exists(movie))
    {
      x = enigma::glaccess(int(movie))-> x;
      y = enigma::glaccess(int(movie))-> y;
      
    }
    angle -= x - xprevious;
    if(s < 1)
      s += 1 / (double) 60;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spike_shield::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite_ext(93, 0, x, y, s, s, angle, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 22.5, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 45, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 67.5, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 90, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 112.5, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 135, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 157.5, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 180, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 202.5, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 225, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 247.5, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 270, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 292.5, col, 1);
    draw_sprite_ext(93, 1, x, y, s, s, angle + 315, col, 1);
    draw_sprite_ext(93, 0, x, y, s, s, angle + 337.5, col, 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electricshield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electricshield::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(busted == 0)
    {
      busted = 1;
      image_speed = .25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electricshield::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
with(spike_shield)
  {
    action_kill_object();
    
  }
  with(fadeout)
  {
    action_kill_object();
    
  }
  with(bubble_shield_100)
  {
    action_kill_object();
    
  }
  with(electric_shield)
  {
    action_kill_object();
    
  }
  with(fire_shield)
  {
    action_kill_object();
    
  }
  
  {
    if(busted == 1)
    {
      instance_create(x, y, electric_shield);
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electricshield::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(busted == 0)
    {
      draw_sprite(94, 2, x, y);
      draw_sprite(58, 0, x, y);
      
    }
    else
    {
      n -= 2;
      draw_sprite(94, 2, x, y + n);
      draw_sprite(95, - 1, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electric_shield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .4;
    sound_play(7);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electric_shield::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 1;
    action_create_object_motion(elec_96, 0, 0, 3, 216);
    
  }
  
  {
    argument_relative = 1;
    action_create_object_motion(elec_96, 0, 0, 3, 252);
    
  }
  
  {
    argument_relative = 1;
    action_create_object_motion(elec_96, 0, 0, 3, 288);
    
  }
  
  {
    argument_relative = 1;
    action_create_object_motion(elec_96, 0, 0, 3, 324);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_electric_shield::myevent_endstep()
{
  
  {
    x = enigma::glaccess(int(Player))-> x;
    y = enigma::glaccess(int(Player))-> y;
    if(y > enigma::varaccess_wl(int(global)))
      instance_destroy();
    if(image_index > 14)
      depth = 10;
    else depth =- 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object89::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object89::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_object89::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    n -= 2;
    
  }
  
  {
    argument_relative = 1;
    action_draw_sprite(shieldicons_94, 0, n, 2);
    
  }
  
  {
    argument_relative = 1;
    action_draw_sprite(smoke_95, 0, 0, - 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spikeshield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spikeshield::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(busted == 0)
    {
      busted = 1;
      image_speed = .25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spikeshield::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
with(spike_shield)
  {
    action_kill_object();
    
  }
  with(fadeout)
  {
    action_kill_object();
    
  }
  with(electric_shield)
  {
    action_kill_object();
    
  }
  with(bubble_shield_100)
  {
    action_kill_object();
    
  }
  with(fire_shield)
  {
    action_kill_object();
    
  }
  
  {
    if(busted == 1)
    {
      instance_create(x, y, spike_shield);
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_spikeshield::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(busted == 0)
    {
      draw_sprite(94, 0, x, y);
      draw_sprite(58, 0, x, y);
      
    }
    else
    {
      n -= 2;
      draw_sprite(94, 0, x, y + n);
      draw_sprite(95, - 1, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_rocky::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    bw = 256;
    orgn0 = view_xview[0] - bw;
    orgn1 = view_xview[0] - bw;
    orgn2 = view_xview[0] - bw;
    orgn3 = view_xview[0] - bw;
    orgn4 = view_xview[0] - bw;
    orgn5 = view_xview[0] - bw;
    orgn6 = view_xview[0] - bw;
    orgn7 = view_xview[0] - bw;
    orgn8 = view_xview[0] - bw;
    orgn9 = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    bh = 184;
    orgny = 0;
    vyp = 0;
    vcy = vy - vyp;
    mxy = room_height - 184;
    mxvc = room_height - 160;
    ydiff = mxvc / (double) mxy;
    mx2y = room_height - 184;
    mx2vc = room_height - 160;
    y2diff = mx2vc / (double) mx2y;
    
  }
  
  {
    argument_relative = 1;
    action_create_object(rocky2, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_rocky::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_rectangle_color(view_xview[0], view_yview[0], view_xview[0] + 320, view_yview[0] + 240, c_black, c_black, c_black, c_black, 0);
    vxp = vx;
    vx = view_xview[0];
    vc = vx - vxp;
    if(orgn0 < view_xview[0] - (bw * 2)|| orgn0 > view_xview[0] )
      orgn0 = view_xview[0] - bw;
    else orgn0 += vc / (double) 3;
    if(orgn1 < view_xview[0] - (bw * 2)|| orgn1 > view_xview[0] )
      orgn1 = view_xview[0] - bw;
    else orgn1 += vc / (double) 4;
    if(orgn2 < view_xview[0] - (bw * 2)|| orgn2 > view_xview[0] )
      orgn2 = view_xview[0] - bw;
    else orgn2 += vc / (double) 1.1875;
    if(orgn3 < view_xview[0] - (bw * 2)|| orgn3 > view_xview[0] )
      orgn3 = view_xview[0] - bw;
    else orgn3 += vc / (double) 1.375;
    if(orgn4 < view_xview[0] - (bw * 2)|| orgn4 > view_xview[0] )
      orgn4 = view_xview[0] - bw;
    else orgn4 += vc / (double) 1.75;
    if(orgn5 < view_xview[0] - (bw * 2)|| orgn5 > view_xview[0] )
      orgn5 = view_xview[0] - bw;
    else orgn5 += vc / (double) 2.125;
    if(orgn6 < view_xview[0] - (bw * 2)|| orgn6 > view_xview[0] )
      orgn6 = view_xview[0] - bw;
    else orgn6 += vc / (double) 2.5;
    if(orgn7 < view_xview[0] - (bw * 2)|| orgn7 > view_xview[0] )
      orgn7 = view_xview[0] - bw;
    else orgn7 += vc / (double) 2.875;
    if(orgn8 < view_xview[0] - (bw * 2)|| orgn8 > view_xview[0] )
      orgn8 = view_xview[0] - bw;
    else orgn8 += vc / (double) 3.25;
    
  }
  
  {
    vyp = vy;
    vy = view_yview[0];
    vcy = vy - vyp;
    orgny += vcy / (double) ydiff;
    orgn2y += vcy / (double) y2diff;
    
  }
  
  {
    draw_background_part(31, 0, 0, 256, 97, view_xview[0], orgny);
    draw_background_part(31, 0, 97, 256, 100, orgn2, orgny + 96);
    draw_background_part(31, 0, 97, 256, 100, orgn2 + 256, orgny + 96);
    draw_background_part(31, 0, 97, 256, 100, orgn2 + 512, orgny + 96);
    draw_background_part(31, 0, 97, 256, 100, orgn2 + 768, orgny + 96);
    draw_background_part(31, 0, 100, 256, 104, orgn3, orgny + 100);
    draw_background_part(31, 0, 100, 256, 104, orgn3 + 256, orgny + 100);
    draw_background_part(31, 0, 100, 256, 104, orgn3 + 512, orgny + 100);
    draw_background_part(31, 0, 100, 256, 104, orgn3 + 768, orgny + 100);
    draw_background_part(31, 0, 104, 256, 112, orgn4, orgny + 104);
    draw_background_part(31, 0, 104, 256, 112, orgn4 + 256, orgny + 104);
    draw_background_part(31, 0, 104, 256, 112, orgn4 + 512, orgny + 104);
    draw_background_part(31, 0, 104, 256, 112, orgn4 + 768, orgny + 104);
    draw_background_part(31, 0, 112, 256, 120, orgn5, orgny + 112);
    draw_background_part(31, 0, 112, 256, 120, orgn5 + 256, orgny + 112);
    draw_background_part(31, 0, 112, 256, 120, orgn5 + 512, orgny + 112);
    draw_background_part(31, 0, 112, 256, 120, orgn5 + 768, orgny + 112);
    draw_background_part(31, 0, 120, 256, 128, orgn6, orgny + 120);
    draw_background_part(31, 0, 120, 256, 128, orgn6 + 256, orgny + 120);
    draw_background_part(31, 0, 120, 256, 128, orgn6 + 512, orgny + 120);
    draw_background_part(31, 0, 120, 256, 128, orgn6 + 768, orgny + 120);
    draw_background_part(31, 0, 128, 256, 144, orgn7, orgny + 128);
    draw_background_part(31, 0, 128, 256, 144, orgn7 + 256, orgny + 128);
    draw_background_part(31, 0, 128, 256, 144, orgn7 + 512, orgny + 128);
    draw_background_part(31, 0, 128, 256, 144, orgn7 + 768, orgny + 128);
    draw_background_part(31, 0, 144, 256, 184, orgn8, orgny + 144);
    draw_background_part(31, 0, 144, 256, 184, orgn8 + 256, orgny + 144);
    draw_background_part(31, 0, 144, 256, 184, orgn8 + 512, orgny + 144);
    draw_background_part(31, 0, 144, 256, 184, orgn8 + 768, orgny + 144);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_rocky2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sound_loop(1);
    bw = 256;
    orgn = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    bonus = 0;
    vy = view_yview[0];
    bh = 184;
    orgny = 0;
    vyp = 0;
    vcy = vy - vyp;
    mxy = room_height - 184;
    mxvc = room_height - 160;
    ydiff = mxvc / (double) mxy;
    mx2y = room_height - 184;
    mx2vc = room_height - 160;
    y2diff = mx2vc / (double) mx2y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_rocky2::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    vxp = vx;
    vx = view_xview[0];
    vc =(vx - vxp)+ bonus;
    if(orgn < view_xview[0] - (bw * 2)|| orgn > view_xview[0] )
      orgn = view_xview[0] - bw;
    else orgn += vc / (double) 4;
    
  }
  
  {
    draw_background_ext(32, orgn, view_yview[0] - 24, 1, 1, 0, c_white, .7);
    draw_background_ext(32, orgn + 256, view_yview[0] - 24, 1, 1, 0, c_white, .7);
    draw_background_ext(32, orgn + 512, view_yview[0] - 24, 1, 1, 0, c_white, .7);
    draw_background_ext(32, orgn + 768, view_yview[0] - 24, 1, 1, 0, c_white, .7);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Alaska::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    alarm[0]= 45;
    alarm[1]= 45;
    nx = 0;
    enigma::varaccess_enigmawait(int(Player))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Alaska::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 1;
    nx += 8;
    if(nx > 240)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Alaska::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    enigma::varaccess_fixme_alarm(int(hud))(0)= 1;
    enigma::varaccess_enigmawait(int(Player))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Alaska::myevent_endstep()
{
  
  {
    draw_set_color(c_black);
    draw_rectangle(x - 120 - nx, y - 80, x + 120 - nx, y + 80, 0);
    draw_set_color(c_red);
    draw_rectangle(x - 72, y - 80 - nx, x - 24, y + 34 - nx, 0);
    col = make_color_rgb(32, 36, 32);
    draw_set_color(col);
    draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    enigmadraw_text(x + nx, y, "RAIL CANYON");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_Alaska::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
Title_4(("ALASKA"), (1), (0), (0), (0));
  
  return 0;
}

variant enigma::OBJ_Alaska::_SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  x = view_xview[0] + 120;
  y = view_yview[0] + 80;
  draw_set_color(c_black);
  draw_sprite_ext(sprBlock, 0, x - 120, y - 80, 2, 2, 0, c_black, 1 - (nx / (double) 240));
  draw_set_color(c_red);
  draw_rectangle(x - 72, y - 80 - nx, x - 23, y + 35 - nx, 0);
  draw_sprite(sprCredit, 1, x - 48, y + 13 - nx);
  col = make_color_rgb(32, 36, 32);
  draw_set_color(col);
  draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
  draw_set_color(c_white);
  font = font_add_sprite(alphabet3, 57, 1, 2);
  draw_set_font(font);
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  enigmadraw_text(x + nx, y, argument0);
  draw_sprite(67, enigma::varaccess_act(int(global)), x + 8 + nx, y);
  
  return 0;
}

variant enigma::OBJ_water::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    bw = 240;
    orgn = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_water::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    vxp = vx;
    vx = view_xview[0];
    vc =(vx - vxp)+ bonus;
    if(orgn < view_xview[0] - (bw * 2)|| orgn > view_xview[0] )
      orgn = view_xview[0] - bw;
    
  }
  
  {
    draw_set_alpha(.25);
    draw_set_color(c_blue);
    draw_rectangle(0, enigma::varaccess_wl(int(global)), room_width, room_height, 0);
    draw_sprite_ext(98, 0, orgn, enigma::varaccess_wl(int(global)), 1, 1, 0, c_white, .25);
    draw_sprite_ext(98, 0, orgn + bw, enigma::varaccess_wl(int(global)), 1, 1, 0, c_white, .25);
    draw_sprite_ext(98, 0, orgn + (2 * bw), enigma::varaccess_wl(int(global)), 1, 1, 0, c_white, .25);
    draw_set_alpha(1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_alaska::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sound_loop(6);
    bw = 256;
    orgn = view_xview[0] - bw;
    vxp = 0;
    vx = view_xview[0];
    vy = view_yview[0];
    vc = vx - vxp;
    bonus = 0;
    vy = view_yview[0];
    bh = 512;
    orgny = 0;
    vyp = 0;
    vcy = vy - vyp;
    mxy = room_height - bh;
    mxvc = room_height - 160;
    ydiff = mxvc / (double) mxy;
    mx2y = room_height - 512;
    mx2vc = room_height - 160;
    y2diff = mx2vc / (double) mx2y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_alaska::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    vxp = vx;
    vx = view_xview[0];
    vc =(vx - vxp)+ bonus;
    if(orgn < view_xview[0] - (bw * 2)|| orgn > view_xview[0] )
      orgn = view_xview[0] - bw;
    else orgn += vc / (double) 8;
    
  }
  
  {
    vyp = vy;
    vy = view_yview[0];
    vcy = vy - vyp;
    orgny += vcy / (double) ydiff;
    orgn2y += vcy / (double) y2diff;
    if(orgny > mxy)
      orgn3y = orgn2y;
    else orgn3y = orgny;
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(alaska_39, orgn, orgn3y, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(alaska_39, orgn + 256, orgn3y, 0);
    
  }
  
  {
    argument_relative = 0;
    action_draw_background(alaska_39, orgn + 512, orgn3y, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_elec_96::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_elec_96::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_fire_shield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 2 / (double) 3;
    sound_play(9);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fire_shield::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_sprite_set(fireshield2_101, - 1, 2 / (double) 3);
  
  {
    on = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fire_shield::myevent_endstep()
{
  
  {
    r = enigma::varaccess_r(int(Player));
    x = enigma::glaccess(int(Player))-> x;
    y = enigma::glaccess(int(Player))-> y;
    imageindex = enigma_floor(image_index);
    if(y > enigma::varaccess_wl(int(global)))
      instance_destroy();
    if(on == 0 && imageindex == 1 || imageindex == 3 || imageindex == 5 || imageindex == 7 || imageindex == 9 || imageindex == 11 || imageindex == 13 || imageindex == 15 || imageindex == 17)
      depth = 10;
    else depth =- 20;
    
  }
  if(action_if_variable(on, 1, 0))
    action_sprite_transform(r, 1, 0, 0);
  
  return 0;
}

variant enigma::OBJ_fire_shield::myevent_collision_0()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,0)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,0)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,0)) { y=yprevious;}}
action_sprite_set(fireshield_100, - 1, 2 / (double) 3);
  
  {
    on = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fire_shield::myevent_collision_60()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,60)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,60)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,60)) { y=yprevious;}}

  {
    on = 0;
    
  }
  action_sprite_set(fireshield_100, - 1, 2 / (double) 3);
  
  return 0;
}

variant enigma::OBJ_fireshield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fireshield::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(busted == 0)
    {
      busted = 1;
      image_speed = .25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fireshield::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
with(spike_shield)
  {
    action_kill_object();
    
  }
  with(fadeout)
  {
    action_kill_object();
    
  }
  with(electric_shield)
  {
    action_kill_object();
    
  }
  with(bubble_shield_100)
  {
    action_kill_object();
    
  }
  with(fire_shield)
  {
    action_kill_object();
    
  }
  
  {
    if(busted == 1)
    {
      instance_create(x, y, fire_shield);
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fireshield::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(busted == 0)
    {
      draw_sprite(94, 1, x, y);
      draw_sprite(58, 0, x, y);
      
    }
    else
    {
      n -= 2;
      draw_sprite(94, 1, x, y + n);
      draw_sprite(95, - 1, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubbleshield::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubbleshield::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(busted == 0)
    {
      busted = 1;
      image_speed = .25;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubbleshield::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
with(spike_shield)
  {
    action_kill_object();
    
  }
  with(electric_shield)
  {
    action_kill_object();
    
  }
  with(fadeout)
  {
    action_kill_object();
    
  }
  with(fire_shield)
  {
    action_kill_object();
    
  }
  with(bubble_shield_100)
  {
    action_kill_object();
    
  }
  
  {
    if(busted == 1)
    {
      instance_create(x, y, bubble_shield_100);
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubbleshield::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(busted == 0)
    {
      draw_sprite(94, 3, x, y);
      draw_sprite(58, 0, x, y);
      
    }
    else
    {
      n -= 2;
      draw_sprite(94, 3, x, y + n);
      draw_sprite(95, - 1, x, y);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubble_shield_100::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .5;
    sound_play(10);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_bubble_shield_100::myevent_endstep()
{
  
  {
    x = enigma::glaccess(int(Player))-> x;
    y = enigma::glaccess(int(Player))-> y;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_panel::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_panel::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_panel::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    image_speed = .5;
    alarm[0]= 30;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_panel::myevent_keypress_90()
{
  
  {
    if(image_speed == 0)
      image_speed = .25;
    else image_speed = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fadeout::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alpha = 0;
    set = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fadeout::myevent_endstep()
{
  
  {
    alpha += .025;
    if(alpha > 1 && set == 1)
    {
      set = 0;
      room_goto(RailCanyon);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_fadeout::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_set_alpha(alpha);
    draw_rectangle_color(0, 0, room_width, room_height, c_white, c_white, c_white, c_white, 0);
    draw_set_alpha(1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_plane::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(15, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_plane::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 0;
    action_set_alarm(15, 0);
    
  }
  
  {
    argument_relative = 1;
    action_create_object(smoke, 90 + enigmarandom(10), 40 + enigmarandom(10));
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object106::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
    enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
    enigma::varaccess_jmp(int(other))= 1;
    enigma::glaccess(int(other))-> vspeed =- 20;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object106::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }

  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_smoke::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_motion(enigmarandom(360), 2);
    
  }
  action_sprite_color(0x808080, 1);
  
  {
    image_speed = 1 / (double) 3;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_smoke::myevent_animationend()
{
  { const bool r = ($iip < image_index); $iip = image_index; if (r) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_icewall::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_single = enigmarandom(9);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_icewall::myevent_endstep()
{
  
  {
    if(distance_to_point(enigma::glaccess(int(spike_shield))-> x, enigma::glaccess(int(spike_shield))-> y)< 50 && broken == 0)
    {
      sound_play(11);
      broken = 1;
      speed = 3;
      gravity = .75;
      direction = 180 + enigmarandom(180);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_snowflake::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    angle = 0;
    dist =(1 - enigmarandom(.5));
    vspeed = 2 + (dist * 1.5);
    
  }
  image_index = enigmarandom(4);
  
  return 0;
}

variant enigma::OBJ_snowflake::myevent_alarm_4()
{
  { if ((alarm[4] == -1) or (alarm[4]--)) return 0; }
action_kill_object();
  
  return 0;
}

variant enigma::OBJ_snowflake::myevent_step()
{
  enigma::propagate_locals(this);

  {
    angle += 2;
    
  }
  action_sprite_transform(dist, dist, angle, 0);
  
  return 0;
}

variant enigma::OBJ_snowflake::myevent_endstep()
{
  
  {
    if(y > (room_height + 32)|| y > enigma::varaccess_wl(int(global)))
    {
      alarm[4]= 30;
      vspeed = 0;
      y = enigma::varaccess_wl(int(global));
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_watersurface::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    if(enigma::glaccess(int(Player))-> y > y - 18 && enigma::glaccess(int(Player))-> y < y - 14 && enigma::glaccess(int(Player))-> x > x && enigma::glaccess(int(Player))-> x < x + 96)
    {
      enigma::glaccess(int(Player))-> hspeed = enigma::varaccess_sp(int(Player))/ (double)(5 / (double) 6);
      enigma::varaccess_sp(int(Player))= 0;
      enigma::glaccess(int(Player))-> gravity = .75;
      enigma::varaccess_fixme_alarm(int(AngleLeft))(7)= 1;
      enigma::varaccess_fixme_alarm(int(AngleRight))(7)= 1;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_watersurface::myevent_endstep()
{
  
  {
    if(abs(enigma::varaccess_sp(int(Player)))> 8)
    {
      x = xstart;
      y = ystart;
      
    }
    else
    {
      x =- 300;
      y =- 300;
      
    }
    if(enigma::glaccess(int(Player))-> y < y - 14)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_wlmaker::myevent_endstep()
{
  
  {
    x = enigma::glaccess(int(Player))-> x - 16;
    y = enigma::varaccess_wl(int(global));
    if(enigma::glaccess(int(Player))-> y < y - 14)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eggopening::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    x =- 100;
    y =- 100;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eggopening::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
action_path(eggopening_0, 10, 0, 1);
  
  return 0;
}

variant enigma::OBJ_eggopening::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(a == 1)
      a = 0;
    else a = 1;
    if(o == 0)
      o = 3;
    else o = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eggopening::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> x > 3888 && enigma::glaccess(int(Player))-> x < 4000 && enigma::varaccess_inair(int(Player))== 0)
    {
      instance_create(enigma::glaccess(int(Player))-> x, enigma::glaccess(int(Player))-> y, movie);
      
    }
    
  }
  if(action_if_variable(enigma::glaccess(int(Player))-> x, 6528, 2))
  {
    argument_relative = 0;
    action_create_object(fadeout, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eggopening::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(x == xprevious)
      draw_sprite_ext(sprMask, 0, x, y, a * 3, a * 3, 0, c_white, .75);
    draw_sprite_ext(103, a, x, y, - 1, 1, 0, c_white, 1);
    draw_sprite_ext(103, 2, x, y, - 1, 1, 0, c_white, 1);
    if(x == xprevious)
      draw_sprite_ext(sprMask, 0, x, y, o * 2, o * 2, 0, c_white, .75);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eyes::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    mxx = 22;
    mxxc = 350;
    xdiff = mxxc / (double) mxx;
    mx2x = 26;
    mx2xc = 350;
    x2diff = mx2xc / (double) mx2x;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eyes::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(Player)&& enigma::glaccess(int(Player))-> x > x - 200 && enigma::glaccess(int(Player))-> x < x + 200)
    {
      ch1 =(x - enigma::glaccess(int(Player))-> x)/ (double) xdiff;
      ch2 =(x - enigma::glaccess(int(Player))-> x)/ (double) x2diff;
      
    }
    if(instance_exists(movie)&& enigma::glaccess(int(movie))-> x > x - 200 && enigma::glaccess(int(movie))-> x < x + 200)
    {
      ch1 =(x - enigma::glaccess(int(movie))-> x)/ (double) xdiff;
      ch2 =(x - enigma::glaccess(int(movie))-> x)/ (double) x2diff;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_eyes::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_sprite(115, 0, x - ch1, y);
    draw_sprite(115, 1, x - ch2, y);
    draw_sprite(115, 2, x - ch1, y);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_speachopening::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  opening_5((0), (0), (0), (0), (0));
  
  {
    font = font_add_sprite(alphabet_08, 33, 1, 2);
    wrote = enigmawrite;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_speachopening::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(instance_exists(electric_shield))
      wrote = writ2e;
    if(instance_exists(bubble_shield_100))
      wrote = writ3e;
    if(instance_exists(fire_shield))
      wrote = writ4e;
    if(instance_exists(movie)&& enigma::varaccess_sp(int(movie))== 0)
      wrote = writ6e;
    if(instance_exists(movie)&& enigma::glaccess(int(eggopening))-> x > enigma::glaccess(int(movie))-> x)
      wrote = writ7e;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_speachopening::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    draw_set_font(font);
    draw_set_color(c_yellow);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    enigmadraw_text(view_xview[0], view_yview[0] + 135, wrote);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_speachopening::_SCR_opening_5(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  gamevars = file_text_open_read("SA3_Text");
  enigmawrite = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ2e = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ3e = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ4e = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ5e = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ6e = file_text_read_string(gamevars);
  file_text_readln(gamevars);
  writ7e = file_text_read_string(gamevars);
  
  return 0;
}

variant enigma::OBJ_snowmaker::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 0;
    action_set_alarm(10, 7);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_snowmaker::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    argument_relative = 0;
    action_create_object(snowflake, view_xview[0] + 120 + enigmarandom(240), view_yview[0] - 16);
    
  }
  
  {
    argument_relative = 0;
    action_create_object(snowflake, view_xview[0] + 120 - enigmarandom(240), view_yview[0] - 16);
    
  }
  
  {
    argument_relative = 0;
    action_create_object(snowflake, enigmarandom(room_width), 16);
    
  }
  
  {
    argument_relative = 0;
    action_create_object(snowflake, enigmarandom(room_width), 16);
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(10, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_snowmaker::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    argument_relative = 0;
    action_create_object(snowflake, view_xview[0] + 120 + enigmarandom(240), 16);
    
  }
  
  {
    argument_relative = 0;
    action_create_object(snowflake, view_xview[0] + 120 - enigmarandom(240), 16);
    
  }
  
  {
    argument_relative = 0;
    action_set_alarm(10, 7);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_solidonlyafter::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> x > x + 90)
      solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_solidonlywhengrinding::myevent_endstep()
{
  
  {
    if(enigma::varaccess_grinding(int(Player))== 1)
    {
      x = xstart;
      y = ystart;
      
    }
    else
    {
      x =- 100;
      y =- 100;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_solidonlywhengrindingcurveupleft::myevent_endstep()
{
  
  {
    if(enigma::varaccess_grinding(int(Player))== 1)
    {
      x = xstart;
      y = ystart;
      
    }
    else
    {
      x =- 100;
      y =- 100;
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boostpad_U_L::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sprite_transform(1, 1, - 90, 1);
  ready = 1;
  
  {
    argument_relative = 1;
    action_create_object(boost_pad_front, 0, 0);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boostpad_U_L::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }
ready = 1;
  
  return 0;
}

variant enigma::OBJ_boostpad_U_L::myevent_collision_6()
{
  if (!((instance_other = enigma::place_meeting_inst(x,y,6)))) return 0;
if (solid ||  enigma::glaccess(int(other))->solid) {if (enigma::place_meeting_inst(xprevious+hspeed,yprevious,6)){x=xprevious;} if (enigma::place_meeting_inst(xprevious,yprevious+vspeed,6)) { y=yprevious;}}

  {
    if(ready == 1)
    {
      enigma::varaccess_sp(int(other))=- 10 - (abs(enigma::varaccess_sp(int(other))))/ (double) 2;
      ready = 0;
      alarm[0]= 30;
      
    }
    else exit;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_railbottomhalf::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    image_index = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_railbottomhalf::myevent_alarm_7()
{
  { if ((alarm[7] == -1) or (alarm[7]--)) return 0; }

  {
    if(enigma::glaccess(int(Player))-> x > x && image_index == 0 && enigma::glaccess(int(Player))-> y > y && enigma::varaccess_sp(int(Player))<= 0 && n == 0)
    {
      n = 1;
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x && image_index == 1 && enigma::glaccess(int(Player))-> y > y && enigma::varaccess_sp(int(Player))>= 0 && n == 0)
    {
      n = 1;
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x < x && enigma::glaccess(int(Player))-> y < y && image_index == 1 && enigma::varaccess_sp(int(Player))<= 0 || enigma::varaccess_hspd(int(Player))> 0)
    {
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> x > x && enigma::glaccess(int(Player))-> y < y && image_index == 0 && enigma::varaccess_sp(int(Player))>= 0 || enigma::varaccess_hspd(int(Player))< 0)
    {
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
      n = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_railbottomhalf::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(image_index == 0 && enigma::varaccess_sp(int(Player))<=- .1 && n == 0)
    {
      n = 1;
      image_index = 1;
      
    }
    if(image_index == 1 && enigma::varaccess_sp(int(Player))>= .1 && n == 0)
    {
      n = 1;
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> y < y - 16 && image_index == 1 && enigma::varaccess_sp(int(Player))<=- .1)
    {
      image_index = 0;
      
    }
    if(enigma::glaccess(int(Player))-> y < y - 16 && image_index == 0 && enigma::varaccess_sp(int(Player))>= .1)
    {
      image_index = 1;
      
    }
    if(enigma::glaccess(int(Player))-> x < x - 112 || enigma::glaccess(int(Player))-> x > x + 112)
      n = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_boost_pad_front::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sprite_transform(1, 1, - 90, 1);
  ready = 1;
  
  return 0;
}

variant enigma::OBJ_solidonlyafter_r_d::myevent_step()
{
  enigma::propagate_locals(this);

  {
    if(enigma::glaccess(int(Player))-> x > x + 40)
      solid = 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_top::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_stem::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw = 0;
    alarm[0]= 45;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[1]= 45;
    background_visible(1)= 1;
    background_visible(3)= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    alarm[2]= 45;
    background_visible(2)= 1;
    background_visible(3)= 1;
    background_visible(1)= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_alarm_2()
{
  { if ((alarm[2] == -1) or (alarm[2]--)) return 0; }

  {
    draw = .01;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_endstep()
{
  if(action_if_variable(draw, 1, 2))
    action_next_room(5);
  
  return 0;
}

variant enigma::OBJ_oppeningcredits::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    if(draw > 0)
    {
      draw += .01;
      draw_background_ext(29, 0, 0, 2, 2, 0, c_white, draw);
      enigmadraw_text(x, y, draw);
      
    }
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_flatrailsolid_if_above::myevent_endstep()
{
  
  {
    if(enigma::glaccess(int(Player))-> y < y + 2)
      solid = 1;
    else solid = 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object130::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    alarm[0]= 45;
    alarm[1]= 45;
    nx = 0;
    enigma::varaccess_enigmawait(int(Player))= 1;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object130::myevent_alarm_0()
{
  { if ((alarm[0] == -1) or (alarm[0]--)) return 0; }

  {
    alarm[0]= 1;
    nx += 8;
    if(nx > 240)
      instance_destroy();
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object130::myevent_alarm_1()
{
  { if ((alarm[1] == -1) or (alarm[1]--)) return 0; }

  {
    enigma::varaccess_fixme_alarm(int(hud))(0)= 1;
    enigma::varaccess_enigmawait(int(Player))= 0;
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object130::myevent_endstep()
{
  
  {
    draw_set_color(c_black);
    draw_rectangle(x - 120 - nx, y - 80, x + 120 - nx, y + 80, 0);
    draw_set_color(c_red);
    draw_rectangle(x - 72, y - 80 - nx, x - 24, y + 34 - nx, 0);
    col = make_color_rgb(32, 36, 32);
    draw_set_color(col);
    draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
    draw_set_color(c_white);
    font = font_add_sprite(alphabet3, 65, 1, 2);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    enigmadraw_text(x + nx, y, "RAIL CANYON");
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_object130::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));
Title_4(("MUSHROOM ISLAND"), (1), (0), (0), (0));
  
  return 0;
}

variant enigma::OBJ_object130::_SCR_Title_4(variant argument0, variant argument1, variant argument2, variant argument3, variant argument4)
{
  x = view_xview[0] + 120;
  y = view_yview[0] + 80;
  draw_set_color(c_black);
  draw_sprite_ext(sprBlock, 0, x - 120, y - 80, 2, 2, 0, c_black, 1 - (nx / (double) 240));
  draw_set_color(c_red);
  draw_rectangle(x - 72, y - 80 - nx, x - 23, y + 35 - nx, 0);
  draw_sprite(sprCredit, 1, x - 48, y + 13 - nx);
  col = make_color_rgb(32, 36, 32);
  draw_set_color(col);
  draw_rectangle(x - 80 + nx, y - 16, x + 90 + nx, y, 0);
  draw_set_color(c_white);
  font = font_add_sprite(alphabet3, 57, 1, 2);
  draw_set_font(font);
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  enigmadraw_text(x + nx, y, argument0);
  draw_sprite(67, enigma::varaccess_act(int(global)), x + 8 + nx, y);
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
    { (variant(*)())_SCR_timeing0, 0 },
    { (variant(*)())_SCR_Data_Write_1, 0 },
    { (variant(*)())_SCR_Data_Read_2, 0 },
    { (variant(*)())_SCR_Data_Close_3, 0 },
    { (variant(*)())_SCR_Title_4, 5 },
    { (variant(*)())_SCR_opening_5, 5 },
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
