/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

variant enigma::OBJ_tester::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    d3d_start();
    d3d_set_projection(0, 0, - 2, 0, 0, - 1, 0, 1, 0);
    verts[0]= vertex(- 1, - 1, - 1);
    verts[1]= vertex(- 1, - 1, 1);
    verts[2]= vertex(- 1, 1, - 1);
    verts[3]= vertex(- 1, 1, 1);
    verts[4]= vertex(1, - 1, - 1);
    verts[5]= vertex(1, - 1, 1);
    verts[6]= vertex(1, 1, - 1);
    verts[7]= vertex(1, 1, 1);
    verts[8]= vertex(- 1, - 1, - 1);
    verts[9]= vertex(- 1, 1, - 1);
    verts[10]= vertex(1, 1, - 1);
    verts[11]= vertex(1, - 1, - 1);
    verts[12]= vertex(- 1, - 1, 1);
    verts[13]= vertex(- 1, 1, 1);
    verts[14]= vertex(1, 1, 1);
    verts[15]= vertex(1, - 1, 1);
    verts[16]= vertex(- 1, 1, - 1);
    verts[17]= vertex(- 1, 1, 1);
    verts[18]= vertex(1, 1, 1);
    verts[19]= vertex(1, 1, - 1);
    verts[20]= vertex(- 1, - 1, - 1);
    verts[21]= vertex(- 1, - 1, 1);
    verts[22]= vertex(1, - 1, 1);
    verts[23]= vertex(1, - 1, - 1);
    
  }
  ;
  
  return 0;
}

variant enigma::OBJ_tester::myevent_draw()
{
  if (!(visible)) return 0;
image_index = fmod(image_index + image_speed, sprite_get_number(sprite_index));

  {
    d3d_primitive_begin(pr_quadlist);
    for(i = 0; i < 24; i ++ )
    {
      draw_set_color(c_red);
      d3d_vertex(verts[i].xx, verts[i].yy, verts[i].zz);
      
    }
    d3d_primitive_end();
    
  }
  ;
  
  return 0;
}

namespace enigma
{
  callable_script callable_scripts[] = {
  };
  
  void constructor(object_basic* instance_b)
  {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;

    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    if(instance->sprite_index!=-1)
    {
      instance->sprite_xoffset = sprite_get_xoffset(instance->sprite_index);
      instance->sprite_yoffset = sprite_get_yoffset(instance->sprite_index);
      
      instance->bbox_left    =   sprite_get_bbox_left(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_right   =  sprite_get_bbox_right(instance->sprite_index)   - instance->sprite_xoffset;
      instance->bbox_top     =   sprite_get_bbox_top (instance->sprite_index)   - instance->sprite_yoffset;
      instance->bbox_bottom  =   sprite_get_bbox_bottom(instance->sprite_index) - instance->sprite_xoffset;
      //instance->sprite_height =  sprite_get_height(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      //instance->sprite_width  =  sprite_get_width(instance->sprite_index);  //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
      instance->image_number  =  sprite_get_number(instance->sprite_index); //TODO: IMPLEMENT THESE AS AN IMPLICIT ACCESSOR
    }
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_single = -1;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
instancecount++;
    instance_count++;
  }
}
